Django-crispy-forms is an application that helps to manage Django forms. It allows adjusting forms’ properties (such as method, send button or CSS classes) on the backend without having to re-write them in the template. This solution is much more readable than plain Django forms and makes rendering the form template really easy — you can even limit it to one line of code. What’s more, django-crispy-forms can affect the appearance and style of the form by adding css classes to the the entire form as well as to individual fields, their labels, or buttons. This is what the rendered form should look like: The HTML’s <form method=”post”> and <input type=”hidden” name=”csrfmiddlewaretoken” value=”somevalue” /> markers are rendered automatically. Each of the fields will have the following structure: Created form lacks an approval button and the address (ie. action) to which we would like to send the data from completed fields. At the beginning you’ll have to add id, button, action and method (“post” method is also by default added to the <form> marker): As a result, a button will appear under the form. In the code you’ll also see parameters that you previously set. At this moment you’ll try to affect the layout of the form by using, among others, bootstrap classes. After that your form will look like this: The “form-horizontal” class added to the form ensured that fields in a column are arranged one by one. Then, by using the Layout class, you’ll define the appearance details of specific form fields. Some of those fields are grouped, particular CSS classes and styles (such as inline, placeholder, title, etc) are added to the generated HTML.The last two fields are organized into tabs. All of this was possible thanks to such imported objects as for instance Field, Div or Fieldset, Tab, which can be successfully nested. Creative Software House Tools, apps & insight on design + development