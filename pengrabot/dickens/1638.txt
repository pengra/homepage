Posted by rocky on May 31, 2015, 6 p.m. However, it is not the easiest thing to use. In this blog post, I will explore some of the things I’ve done in the past to overcome some of the rough edges that OneToOneFields have. There are a couple of solutions to this problem: Work around it with a property, something like this:  So I was thinking, why don’t we just create a OneToOneField that automatically creates the profile if it doesn’t exist? That way we won’t get exceptions. Plus! The profile is created automatically for you. Turns out it’s not too hard. And bonus! It uses my favorite feature from Python, object descriptors!  Let’s look back at our previous example, becomes: And now when you try to access it, there are no errors thrown:  However, it works well for those instances when you always want a profile model available for a user and can provide defaults for all of the fields. What if instead of creating the related model, the OneToOneField just returned None instead? That would be easier to deal with in your code and also wouldn’t make assumptions on how to create related models.  (Yay for more Python object descriptors!)  Because OneToOneFields will throw an exception if the related model doesn’t exist, the Django docs suggest using hasattr to check whether or not the related model exists. Ideally, there would be some property on the related model that informs me whether or not the related model exists. Something like this:  Now I can write code like this:  Which I find much more readable than using than  However, this of course forces me to implement my own custom user model, boo. Additionally, if my app has more than one user type (for example Customer and Merchant for a store app), then I will start having to keep adding more properties that have almost the exact same code. Not very DRY. Wouldn’t it be better if I could automatically add a property that tells me whether or not the related model exists? Here’s a OneToOneField subclass that provides this feature:  Now, when I create my profile models, I can add that property to the User model without touching the User model[0].  And now the User model has these readable flags that I can use instead of hasattr.  Thanks for reading! ©2019 Fusionbox, Inc., a Python Development Company. All rights reserved.