See all Â» Plugin selection in Dolphin 2.0. However, due to extreme differences between APIs of the time, complete integration into VideoCommon was impossible without major regressions. So many features, such as EFB (Embedded Framebuffer) copy handling, EFB peeks, video dumping, texture decoding, etc were unique between backends. This naturally lead to new features being added on a per-backend basis, worsening the situation. As such, those initial design decisions would continue to shape Dolphin for years and years to come. How many times has there been an Embedded Framebuffer (EFB) issue unique to a particular backend?  Way too many!  Each backend has had its own implementations and optimizations for emulating EFB and providing EFB Access From CPU, so there were lots of edge cases. Note: The developers of Monster Hunter Tri had an obsession with EFB Peeks and Pokes.  Of all the ways a game could let you choose colors for various parts of your character, Monster Hunter Tri presents you with a color wheel and lets you use the Wii Remote to pick a color.  It then uses an EFB peeks to read the pixel you selected to see what color you used and applies that to your character.  While users will probably disable EFB Access From CPU in game, at least the character creator works properly now. The results are staggering, with an average gain of ~65% across all backends in EFB Peek/Poke heavy areas.  But the raw numbers don't tell the whole story - the games are in general smoother and more stable, without those random drops when a previously demanding effect would show pan across the screen. AMD GPUs have shuffling as a driver optimization, so they have benefited from this for years. However, for Nvidia users this will bring a nice bounding box performance improvement to OpenGL and Vulkan 1.1. As for Mobile GPUs... shuffling is an optional feature, so they are probably never going to support it. Nothing destroys the experience of replaying your favorite game in an emulator more than a sudden emulator crash.  It's even worse when the only solution is to just use another backend, especially if that backend is less efficient for your particular hardware. Because new features had to be written for each backend individually, developers would often only work on the backends that they were able to easily test.  Given that most of Dolphin's developers use Linux, D3D11 often got the short end of the stick.  Even many recently added features were outright missing from the Windows-only backend, like GPU Texture Decoding! Beyond just features, the goal of the Videocommon Unification project was to make Dolphin's codebase Dolphin easier to use and more flexible to work on, so it can continue to remain an actively developed emulator for years to come.  There's still a lot of work that needs to be done! The first thing we need to address about the results above is the lack of Vulkan.  Despite improving Vulkan drivers on Windows, Dolphin's Vulkan backend still will not run on Intel HD's Windows drivers.  Users wishing to use Vulkan on their Intel HD graphics chips have to use Linux and the Mesa drivers.  Beyond that unfortunate omission of Vulkan, there's a lot to go through here as the results aren't so obvious at a glance.  Thankfully, by looking at what these games are doing, we can actually make out the strengths and weaknesses of each backend. By disabling these features (which may leave the game unplayable), you can see clearly how much they affect each backend across different drivers on the same computer.  There are a lot of results to go through, so feel free to disable any results you're not interested in by clicking the options present in the each graph's legend. Maintaining any piece of software for over 15 years, let alone actively improving it, is not an easy task.  There have been countless rewrites over the years that stay mostly silent, unless there's some outcry caused by an userfacing regression.  With the VideoCommon rewrite, the benefits are so great and so immediate for both developers and users, that we've been given the rare opportunity to dive into the many facets of one of these massive cleanups.  It has facilitated many of these optimizations and fixes, along with the return of D3D12 in a form that doesn't hamper the other backends and graphics development. This is but a single example throughout the history of the project, and unlikely to be the last.  As an emulator, Dolphin strives to give the best possible experience to its users, while providing a friendly environment for developers to try their hand at taming the beast that was the GameCube and Wii hardware.  With more exciting still features on the horizon, the sun hasn't yet set on this ageless emulator.