For years I never had a need to use classes and I was put off by the ugliness of c++, I used c and python for whatever I was interested in but im finally working on a gui project now and I chose qt. I have been into this for a few days now and am really enjoying it, map, list, vector, range based for.... I always said why bother with c++ as if I want control I can use C and if I want easy power I can use python, but im starting to see the beauty of what appears to be almost a mix of my two favourite languages. I have to apologise for dissing this language and OOP without ever giving it a chance. At Kona last week, I worked with Nathan Sidwell who is working on GCC's module support to get a minimally viable proof-of-concept for CMake building modules. There is ongoing discussion about the actual format of the information GCC writes out to communicate module dependency information to CMake, so that part certainly isn't final. I've created a Docker image with all the bits required to reproduce this setup locally as an existence proof that existing build tools can also do it (without magical implicit BMI-generation behind the scenes). There are some known limitations, but nothing that's an existential worry at the moment. To download: docker pull benboeckel/cxx-modules-sandbox:latest Running is simply: docker run -it $image which drops you into a shell with the environment set up properly already. **Company:** [Company name; also, use the "formatting help" to make it a link to your company's website, or a specific careers page if you have one] I love makefiles, but I have crippling fear of missing out on good features in other build systems. So what can you do with your build system that is impressive? I ask r/cpp_questions however the lame answer of cmake's feature list isn't a selling point. I want to know your weird ways, and how your build system(or build system system) helps you accomplish it. https://codingtidbit.com/2019/04/01/c22-fullptr-to-replace-nullptr/ Here's what I actually want to say: That avenue would be "the best" because there's a good chance that a (potential) committee member might see it and love it enough to champion it. But that may be asking too much. It's an okay thing to do over on the C# language design repo on GitHub (for example), but the process for C++ seems a lot tighter. And I'm not a member and am very very unlikely to become one. The proposals also are usually not at a level that justifies formal submission (if there's even an avenue for that without a champion). Hence why I'm looking for a public, somewhat informal place to post such. The closest thing I found, some discussion groups on Google Groups, are getting closed soon. And they don't seem to be specifically for language design discussion (had a lot of help questions and the like). Thanks! 82.2k Subscribers 949 Online Discussions, articles and news about the C++ programming language or programming in C++.