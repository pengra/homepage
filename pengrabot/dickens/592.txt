How does React compare to Angular, Ember, Backbone, et al? How do you handle data? How do you contact the server? What the heck is JSX? What is a "component"? Stop. Stop it right now. React is MAINLY THE VIEW LAYER. React is mentioned in the same breath as other Javascript frameworks, but "React vs Angular" doesn't make sense because they aren't directly comparable. Angular is a complete framework (including a view layer), React is not. This is why React is confusing to understand, it's emerging in an ecosystem of complete frameworks, but it's mostly the view. React gives you a template language and some function hooks to essentially render HTML. That's all React outputs, HTML. Your bundles of HTML / Javascript, called "components," can have their own internal state (such as which tab is selected in a tab view), but in the end you just barf out HTML. After working with React for a while, I've seen some important benefits surface. 1. Easily reason about how views render Your user logs in and you have to update the header. You might do this: Here's how you might do it in React: 2. JSX means clean, well organized view code 3. You can render React on the server Server side rendering is one of the most important optimizations you can make to speed up a Javascript application. Browsers are designed from the ground up to show users rendered HTML as fast as possible. True "single page applications" are only appropriate for a subset of the web, like email clients where you typically leave them open for weeks and do very few actual page loads. 4. React will trick you into loving functional programming. 1. You DON'T GET any of the following: 2. Welcome to Webpack and a new ecosystem As Front End developers, we aren't used to applying static analysis, code compilation, and software engineering principles to our code. It's intimidating, but this "bad" is also a good. It's worth it in the end! 3. Flux and data flow are complex patterns for beginners In the original React documentation, React and Flux were mentioned in the same breath, without much concern for a newcomer audience. It's gotten a lot better now, but since most people have graduated from Flux to Redux or other state management, understanding this data flow can still be difficult. Long answer: probably, yes, for most things.