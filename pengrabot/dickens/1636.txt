I have Contacts and ContactsGroup Two models contact contains group as m2m relationship and contacts is another model I want to create bulk_create contacts where contact_group also added on the model. But shows error Is there any solution ? Maybe this can help, change last but one line to: seems to me that variables are mixed. I tried to fix this but in the end it was quicker and easier to switch to the Django-REST framework. The docs are so much better for Djano-REST that it was trivial to set it up and build tests. There seem to be no time savings to be had with... It looks like (re-reading your post it's not 100% clear) what you want is a partial application. Good news, it's part of Python's stdlib: import os from functools import partial def generic_upload_to(instance, filename, folder): return os.path.join(instance.name, folder, filename) class Project(TimeStampedModel): name = models.TextField(max_length=100, default='no name') logo = models.ImageField( upload_to=partial(generic_upload_to, folder="logo")... Django templates do not use inclusion so much as template inheritance. The idea is you set up a hierarchy of templates, specializing some common thing. For instance: you could have a base.html that has some basic page structure, common to all pages of your website. you could then have a... You need sudo for the python command to write to /Library/Frameworks...: curl https://bootstrap.pypa.io/ez_setup.py -o - | sudo python ... RequestFactory and Client have some very different use-cases. To put it in a single sentence: RequestFactory returns a request, while Client returns a response. The RequestFactory does what it says - it's a factory to create request objects. Nothing more, nothing less. The Client is used to fake a complete... Since, request.GET is a dictionary, you can access its values like this: for var in request.GET: value = request.GET[var] # do something with the value ... Or if you want to put the values in a list: val_list = [] for var in request.GET: var_list.append(request.GET[var]) ... Here's a basic approach you can tweak for your convenience: Add a first_image field to your model: class Blog(models.Model): title = models.CharField(max_length=150, blank=True) description = models.TextField() pubdate = models.DateTimeField(default=timezone.now) publish = models.BooleanField(default=False) first_image = models.CharField(max_length=400, blank=True) Now all you have to do is populate your first_image field on save, so... You shouldn't check the checkbox, but check the value of the file input field. If it is False, then you can delete the file. Otherwise it is the uploaded file. See: https://github.com/django/django/blob/339c01fb7552feb8df125ef7e5420dae04fd913f/django/forms/widgets.py#L434 # False signals to clear any existing value, as opposed to just None return False return upload ... Try: when_first_upload = models.DateTimeField(default=datetime.datetime.now) You need the callable itself, not the result returned by it.... The Django admin uses AdminTimeWidget to display time fields, not the TimeInput widget that you are using in your code. There isn't a documented way to reuse the AdminTimeWidget outside of the Django admin. Getting it to work is very hacky (see the answer on this question, which is probably... The solution that worked for me was removing the below piece of code from settings.py: TEMPLATES = [ { 'BACKEND': 'django.template.backends.django.DjangoTemplates', 'DIRS': [], 'APP_DIRS': True, 'OPTIONS': { 'context_processors': [ 'django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib.auth.context_processors.auth', 'django.contrib.messages.context_processors.messages', ], }, }, ] And adding : TEMPLATE_DIRS = ('C:/Users/vaulstein/tango_with_django_project/templates',) OR Changing the line... It looks like your plural are in the wrong spot: {% for post_images in post.sellpostimage_set.all %} should be: {% for post_image in post.sellpostimage_set.all %} post_image = SellPostImage.objects.filter(post=poster_posts) context_dict['post_image'] = post_image should be: post_images = SellPostImage.objects.filter(post=poster_posts) context_dict['post_images'] = post_images or: post_image = SellPostImage.objects.get(post=poster_posts) context_dict['post_image'] = post_image why do you do this... You can add the angular app as a simple template view in Django views.py def index(request): return render(request, 'yourhtml.html', {}) urls.py .... url(r'^your_url/$', views.index), .... Then the index.html file can have your angular code... It looks like you're missing zlib; you'll want to install it: apt-get install zlib1g-dev I also suggest reading over the README and confirming you have all other dependencies met: https://github.com/dccmx/mysqldb/blob/master/README Also, I suggest using mysqlclient over MySQLdb as its a fork of MySQLdb and what Django recommends.... I would use this: def _total_amount(self): req = QuoteRow.objects.filter(quote=self.pk) return sum([i.unit_price * i.quantity for i in req]) It takes one more line but it's clearer to me.... According to the Django documentation regarding static/: This should be an initially empty destination directory for collecting your static files from their permanent locations into one directory for ease of deployment; it is not a place to store your static files permanently. You should do that in directories that will... Forgive me to digress a little, but I can't help but wonder use could have gotten away with far less code, than you have if you had created a serializer and used a class-based view. Besides, if you had just created email as EmailField of serializer it would have automatically... You can use the include tag in order to supply the included template with a consistent variable name: For example: parent.html <div class="row"> <div class="col-md-12 col-lg-12 block block-color-1"> {% include 'templates/child.html' with list_item=mylist.0 t=50 only %} </div> </div> child.html {{ list_item.text|truncatewords:t }} UPDATE: As spectras recommended, you can use the... Every photo has the same id for its like count: {% for photo in photos %} <a href="#" id="like_count">0</a> {% endfor %} Therefore, only the first is recognized as the 'real' #like_count Since you have a primary key for the photo, you could make the ids distinct by incorporating the... You should be able to create a different FileSystemStorage instance for each storage location. Alternatively, you could write a custom storage system to handle the files.... When migration created, you can manually change the base migration class to your custom subclass with overridden apply method from django.db import migrations class MyBaseMigration(migrations.Migration): def apply(self, project_state, schema_editor, collect_sql=False): for operation in self.operations: """ Examine operation classes here and provide end-user notes """ return super(MyBaseMigration, self).apply(project_state, schema_editor, collect_sql=collect_sql) ... Your SignUpView is not specifying the form it should render, you need to add the form_class attribute. class SignUpView(CreateView): form_class = RegistrationForm model = User template_name = 'accounts/signup.html' ... Are you using the {% load staticfiles %} in your templates? You should reverse the foreign key relationship: class HeartRate(models.Model): timestamp = models.DateTimeField('Date and time recorded') heartrate = models.PositiveIntegerField(default=0) exercise = models.ForeignKey(Exercise, related_name='heartrates') class Exercise(models.Model): start_timestamp = models.DateTimeField('Starting time') finishing_timestamp = models.DateTimeField('Finishing time') To get all of the heartrates of an exercise: heartrates = my_exercise.heartrates.all() ... Passenger author here. Try setting passenger_log_level to a higher value, which may give you insights on why this is happening. I don't know which Passenger version you are using, but in version 5, the Passenger request processing cycle looks like this: Apache receives the request. Once headers are complete, it... I think you might be looking for render_to_string. from django.template.loader import render_to_string context = {'foo': 'bar'} rendered_template = render_to_string('template.html', context) ... This error: File "/tutorial/tutorial/urls.py", line 9, in <module> url(r'^admin/', include(snippets.urls)), NameError: name 'snippets' is not defined occurs because snippets.urls has to be quoted. See the example here: urlpatterns = [ url(r'^', include('snippets.urls')), ] As shown here, you could write something like this: from django.contrib import admin urlpatterns = [ url(r'^polls/',... I've done this with a simple method in views.py. Simply retrieve the record, blank out its id then save and open it. Something like def create_new_version(request) : record = models.MyDocument.objects.filter(id=request.GET['id'])[0] record.id = None record.save() return http.HttpResponseRedirect(reverse('edit-mydocument', kwargs={'pk':record.id})) where MyDocument is your model and edit-mydocument is your UpdateView. Just call this... Why not run a SSH server on the VM and connect from the host via a terminal? See MAC SSH. Which OS is running on the VM? It should not be too hard to get the SSH server installed and running. Of course the VM client OS must have an... It looks like you're running against the system version of python on the new laptop, rather than the virtualenv, so it is probably a different version. You can check this by looking at the version of Python on the virtualenv in the old laptop and the new laptop with python... model.py: class Day(models.Model): date = models.DateField(default=date.today) def get_todo_list(self): return self.day_todo_set.order_by('-id')[:5] class ToDo(models.Model): date = models.ForeignKey(Day, related_name="day_todo_set") name = models.CharField(max_length=100) very_important = models.BooleanField(default=False) finished = models.BooleanField(default=False) In serializers.py class ToDoSerializer(serializers.ModelSerializer): class Meta: model = ToDo field = ('id', 'date', 'name', 'very_important', 'finished') class... Typically, as stated by @DanielRoseman, you certainly want to: Create a REST API to get data from another web site Get data, typically in JSON or XML, that will contain all the required data (name and surname) In the REST controller, Convert this data to the Model and save the... You need to define a custom template tag which returns the type of data. from django import template register = template.Library() @register.filter def data_type(value): return type(value) Then use it inside your template like this: {% for key, value in leasee.items %} <p> {{key}} </p> <ul> {%if value|data_type == 'dict' %}... You need to assign the field to form.fields, not just form. However this is not really the way to do this. Instead, you should make all your forms inherit from a shared parent class, which defines the captcha field.... There are two things that you need to change. In the views.py file, rather than returning 4 different lists, return a single zipped version of the lists like zipped_list = zip(first_list, second_list, third_list, fourth_list) Now this must be passed to the view file that is being rendered. context_dict = {'zipped_list':... In your view, you need to provide the following: lookup_field -> Most probably the ID of the record you want to update lookup_url_kwarg -> The kwarg in url you want to compare to id of object You need to define a new url in your urls.py file. This will carry... Your problem is with your if/else tags. You have this: {{ % if ... %}} ... {{% else %}} ... First off, you need to surround if/else by {% %}, not {{% %}}. Secondly, you don't have an endif. An if/else block should look like this: {% if ... %}... Your form inherits from forms.Form, which does not know anything about models and ignores the Meta class. You should inherit from forms.ModelForm. As noted in the docs, .update() doesn't call the model .save() or fire the post_save/pre_save signals for each matched model. It almost directly translates into a SQL UPDATE statement. https://docs.djangoproject.com/en/1.8/ref/models/querysets/#update Finally, realize that update() does an update at the SQL level and, thus, does not call any save() methods on... Save the form with commit=False, edit the returned instance, then save it to the db. if request.POST: f = Create_EventForm(request.POST) if f.is_valid(): event = f.save(commit=False) event.other_value = lookup_value() event.save() See the doc's on ModelForm's save method for more info.... You're very close: Change: [i.dealership for i in q.dealership.all] to: [dealership for dealership in q.dealership.all()] Here's sample output from one of my model's M2M relationships on a project which demonstrates what you should see from the list comprehension. shared_with is an M2M field to a model called Profile: >>> from... The above algorithm would not work , because assume you have the following list - [0,2,5,9] You should ideally get - [0,1,2,3] The sum of that list is 6 , but the length of the list is 4 , this does not meet your condition in is_compressed() . The algorithm... Remove plugins you don't need from INSTALLED_APPS. Alternatively, in an app after all plugin apps in INSTALLED_APPS in either cms_plugins.py or models.py you can use cms.plugin_pool.plugin_pool.unregister_plugin to remove them from the pool: from cms.plugin_pool import plugin_pool from unwanted_plugin_app.cms_plugins import UnwantedPlugin plugin_pool.unregister_plugin(UnwantedPlugin) ... There is no {% switch %} tag in Django template language. To solve your problem you can either use this Django snippet, that adds the functionality, or re-write your code to a series of {% if %}s. The second option in code: {% if property.category.id == 0 %} <h4>'agriculture'</h4> {%... Django by itself doesn't provide access to the database-level users / groups / permissions, because it doesn't make much sense for a typical web application where all connections will be made with the same database user (the one defined in settings.DATABASES). Note that it's not a shortcoming be really the... You are trying to match a foreign key to a string, you need to provide the model ProductPart.objects.values().filter(part=v) Note: the values isn't necessary either ProductPart.objects.filter(part=v) From the documentation for Values a QuerySet subclass that returns dictionaries when used as an iterable, rather than model-instance objects. In other words, you are... Remove the comma on your first line of code, this turns it into a tuple optional_message = form.cleaned_data['optional_message'], should be optional_message = form.cleaned_data['optional_message'] ... Use the linebreaks template filter. If your template is independent of apps, it shouldn't be in your app folder - namespace it accordingly. How do you load your template? Did you setup your templates/staticfolders in your settings.py? Updated For the fresh project you need to configure your settings.py file. Read here, ask away if you... Invoke django-admin.py like this python django-admin.py, in your activate virtualenv. Alternatively you can do /path/to/virtualenv/bin/python django-admin.py. The best solution is probably adding a shebang to django-admin.py that looks like #!/usr/bin/env python which should use the python interpreter of your active virtualenv. See http://stackoverflow.com/a/2255961/639054