Usage: Suppress all Vue logs and warnings. Usage: Define custom merging strategies for options. The merge strategy receives the value of that option defined on the parent and child instances as the first and second arguments, respectively. The context Vue instance is passed as the third argument. Usage: Usage: Assign a handler for uncaught errors during component render function and watchers. The handler gets called with the error and the Vue instance. In 2.4.0+, this hook also captures errors thrown inside Vue custom event handlers. New in 2.4.0+ Usage: Assign a custom handler for runtime Vue warnings. Note this only works during development and is ignored in production. Usage: Usage: New in 2.2.0+ New in 2.2.0+ Arguments: Usage: Create a “subclass” of the base Vue constructor. The argument should be an object containing component options. Will result in: Arguments: Usage: Defer the callback to be executed after the next DOM update cycle. Use it immediately after you’ve changed some data to wait for the DOM update. New in 2.1.0+: returns a Promise if no callback is provided and Promise is supported in the execution environment. Please note that Vue does not come with a Promise polyfill, so if you target browsers that don’t support Promises natively (looking at you, IE), you will have to provide a polyfill yourself. Arguments: Usage: The target object cannot be a Vue instance, or the root data object of a Vue instance. Arguments: Only in 2.2.0+: Also works with Array + index. Usage: Delete a property on an object. If the object is reactive, ensure the deletion triggers view updates. This is primarily used to get around the limitation that Vue cannot detect property deletions, but you should rarely need to use it. The target object cannot be a Vue instance, or the root data object of a Vue instance. Arguments: Usage: Register or retrieve a global directive. Arguments: Usage: Register or retrieve a global filter. Arguments: Usage: Arguments: Usage: When this method is called on the same plugin multiple times, the plugin will be installed only once. Arguments: Usage: Arguments: Usage: New in 2.6.0+ Arguments: Usage: Details: Once observed, you can no longer add reactive properties to the root data object. It is therefore recommended to declare all root-level reactive properties upfront, before creating the instance. Example: Details: A list/hash of attributes that are exposed to accept data from the parent component. It has an Array-based simple syntax and an alternative Object-based syntax that allows advanced configurations such as type checking, custom validation and default values. With Object-based syntax, you can use following options: Example: Details: Pass props to an instance during its creation. This is primarily intended to make unit testing easier. Example: Details: Example: Details: Example: Details: Example: Details: Provide the Vue instance an existing DOM element to mount on. It can be a CSS selector string or an actual HTMLElement. See also: Details: From a security perspective, you should only use Vue templates that you can trust. Never use user-generated content as your template. If render function is present in the Vue option, the template will be ignored. See also: Details: New in 2.2.0+ Details: Only works in development mode. Example: Details: Called synchronously immediately after the instance has been initialized, before data observation and event/watcher setup. Details: Details: This hook is not called during server-side rendering. Details: This hook is not called during server-side rendering. Details: Called when data changes, before the DOM is patched. This is a good place to access the existing DOM before an update, e.g. to remove manually added event listeners. This hook is not called during server-side rendering, because only the initial render is performed server-side. Details: Called after a data change causes the virtual DOM to be re-rendered and patched. This hook is not called during server-side rendering. Details: Called when a kept-alive component is activated. This hook is not called during server-side rendering. See also: Details: Called when a kept-alive component is deactivated. This hook is not called during server-side rendering. See also: Details: Called right before a Vue instance is destroyed. At this stage the instance is still fully functional. This hook is not called during server-side rendering. Details: Called after a Vue instance has been destroyed. When this hook is called, all directives of the Vue instance have been unbound, all event listeners have been removed, and all child Vue instances have also been destroyed. This hook is not called during server-side rendering. New in 2.5.0+ Details: You can modify component state in this hook. However, it is important to have conditionals in your template or render function that short circuits other content when an error has been captured; otherwise the component will be thrown into an infinite render loop. Error Propagation Rules Details: A hash of directives to be made available to the Vue instance. Details: A hash of filters to be made available to the Vue instance. Details: A hash of components to be made available to the Vue instance. Details: Details: Mixin hooks are called in the order they are provided, and called before the component’s own hooks. Example: Details: Example: New in 2.2.0+ Type: Details: This pair of options are used together to allow an ancestor component to serve as a dependency injector for all its descendants, regardless of how deep the component hierarchy is, as long as they are in the same parent chain. If you are familiar with React, this is very similar to React’s context feature. Example: Using an injected value as the default for a prop: Using an injected value as data entry: In 2.5.0+ injections can be optional with default value: Similar to prop defaults, you need to use a factory function for non primitive values: Details: Details: Change the plain text interpolation delimiters. Example: Details: New in 2.2.0 Details: Example: The above will be equivalent to: New in 2.4.0+ Details: New in 2.4.0+ Details: Details: The data object that the Vue instance is observing. The Vue instance proxies access to the properties on its data object. New in 2.2.0+ Details: An object representing the current props a component has received. The Vue instance proxies access to the properties on its props object. Read only Details: The root DOM element that the Vue instance is managing. Read only Details: The instantiation options used for the current Vue instance. This is useful when you want to include custom properties in the options: Read only Details: The parent instance, if the current instance has one. Read only Details: The root Vue instance of the current component tree. If the current instance has no parents this value will be itself. Read only Details: Read only Details: Example: See also: New in 2.1.0+ Read only Details: See also: Read only Details: See also: Read only Details: Whether the current Vue instance is running on the server. New in 2.4.0+ Read only Details: New in 2.4.0+ Read only Details: Arguments: Usage: Watch an expression or a computed function on the Vue instance for changes. The callback gets called with the new value and the old value. The expression only accepts dot-delimited paths. For more complex expressions, use a function instead. Note: when mutating (rather than replacing) an Object or an Array, the old value will be the same as new value because they reference the same Object/Array. Vue doesn’t keep a copy of the pre-mutate value. Example: Option: deep Option: immediate Arguments: Usage: Arguments: Usage: Arguments: Usage: Example: Arguments: Usage: Listen for a custom event, but only once. The listener will be removed once it triggers for the first time. Arguments: Usage: Remove custom event listener(s). If no arguments are provided, remove all event listeners; If only the event is provided, remove all listeners for that event; If both event and callback are given, remove the listener for that specific callback only. Arguments: Trigger an event on the current instance. Any additional arguments will be passed into the listener’s callback function. Examples: Arguments: Usage: The method returns the instance itself so you can chain other instance methods after it. Example: See also: Usage: Force the Vue instance to re-render. Note it does not affect all child components, only the instance itself and child components with inserted slot content. Arguments: Usage: New in 2.1.0+: returns a Promise if no callback is provided and Promise is supported in the execution environment. Please note that Vue does not come with a Promise polyfill, so if you target browsers that don’t support Promises natively (looking at you, IE), you will have to provide a polyfill yourself. Example: See also: Usage: Completely destroy a vm. Clean up its connections with other existing vms, unbind all its directives, turn off all event listeners. Details: Example: Details: Example: Usage: This directive triggers transitions when its condition changes. Usage: This directive triggers transitions when its condition changes. Does not expect expression Usage: New in 2.1.0+ Usage: Usage: Alternatively, you can also specify an alias for the index (or the key if used on an Object): See also: Modifiers: Usage: Attaches an event listener to the element. The event type is denoted by the argument. The expression can be a method name, an inline statement, or omitted if there are modifiers present. Example: Listening to custom events on a child component (the handler is called when “my-event” is emitted on the child): See also: Modifiers: Usage: Dynamically bind one or more attributes, or a component prop to an expression. When used for prop binding, the prop must be properly declared in the child component. Example: See also: Limited to: Modifiers: Usage: Create a two-way binding on a form input element or a component. For detailed usage and other notes, see the Guide section linked below. See also: Limited to: Usage: Denote named slots or slots that expect to receive props. Example: For more details, see the links below. See also: Does not expect expression Usage: Skip compilation for this element and all its children. You can use this for displaying raw mustache tags. Skipping large numbers of nodes with no directives on them can also speed up compilation. Example: Does not expect expression Usage: Example: Does not expect expression Details: See also: It can also be used to force replacement of an element/component instead of reusing it. This can be useful when you want to: For example: For example: For detailed usage, follow the links in the description above. See also: Used on content inserted into child components to indicate which named slot the content belongs to. Usage: This attribute does not support dynamic binding. Usage: Props: Usage: Props: Events: Usage: Props: Events: Usage: Props: Usage: Primarily used to preserve component state or avoid re-rendering. New in 2.1.0+ max New in 2.5.0+ The maximum number of component instances to cache. Once this number is reached, the cached component instance that was least recently accessed will be destroyed before creating a new instance. Props: Usage: For detailed usage, see the guide section linked below.