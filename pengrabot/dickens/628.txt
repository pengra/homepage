See six pages from the typescript of Turing's paper in the Turing Digital Archive. The Turing machine concept involves specifying a very restricted set of logical operations, but Turing showed how other more complex mathematical procedures could be built out of these atomic components. Turing argued that his formalism was sufficiently general to encompass anything that a human being could do when carrying out a definite method. A Universal machine is a Turing machine with the property of being able to read the description of any other Turing machine, and to carry out what that other Turing machine would have done. It is not at all obvious that such a machine, a machine capable of performing any definite method, could exist. Intuitively one might think that more complex tasks would need more complex machines. They do not: it is sufficient to have a specific, limited, degree of complexity. More laborious tasks need only have more storage capacity. We are now so familiar with the idea of the computer as a fixed piece of hardware, requiring only fresh software to make it do entirely different things, that it is hard to imagine the world without it. But Turing imagined the Universal Turing Machine ten years before it could be implemented in electronics. Now you can use your computer to simulate the working of a Turing machine, and so see on the screen what in 1936 was only possible in Turing's imagination. This is no accident! — the whole point is that the computer embodies the principle of a Universal Turing machine, which can simulate any Turing machine. It was also essential to Turing's 1936 work that a Turing machine could be thought of as data to be read and manipulated by another Turing machine — this is the principle of the modifiable stored program on which all computing now depends. There are three applications ready to run on-line. Alan Turing's definition of a Turing machine was not intended as a blueprint for how one would actually build practical computing machinery. The very primitive actions of reading and writing and moving one step at a time are like atoms of computation, and the atomic level is too time-consuming for what is needed in practice. When Turing came in 1945 to design a computer, he knew well that data storage and the logical control would have to be implemented in a  completely different way. The most famous uncomputable function, closely related to Turing's own 1936 proof, is one that distinguishes between halting and non-halting Turing machines. Turing used his definition of an uncomputable number to answer Hilbert's question in the negative: there can be no one definite method capable of deciding whether or not a given mathematical statement is provable. There was much talk in the 1930s of it being an 'age of machines.' H. G. Wells's futuristic fantasy of 1933 became a film in 1936. Little did they know...