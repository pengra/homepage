Python has a great concept called property which makes the life of an object oriented programmer much simpler. Before defining and going into details of what @property is, let us first build an intuition on why it would be needed in the first place. The extra decimal places when converting into Fahrenheit is due to the floating point arithmetic error (try 1.1 + 2.2 in the Python interpreter). Now, let's further assume that our class got popular among clients and they started using it in their programs. They did all kinds of assignments to the object. One fateful day, a trusted client came to us and suggested that temperatures cannot go below -273 degree Celsius (students of thermodynamics might argue that it's actually -273.15), also called the absolute zero. He further asked us to implement this value constraint. Being a company that strive for customer satisfaction, we happily heeded the suggestion and released version 1.01 (an upgrade of our existing class). This update successfully implemented the new restriction. We are no longer allowed to set temperature below -273. Please note that private variables don't exist in Python. There are simply norms to be followed. The language itself don't apply any restrictions. This refactoring can cause headaches to the clients with hundreds of thousands of lines of codes. All in all, our new update was not backward compatible. This is where property comes to rescue. The pythonic way to deal with the above problem is to use property. Here is how we could have achieved it. And, issue the following code in shell once you run it. Can you guess why? By using property, we can see that, we modified our class and implemented the value constraint without any change required to the client code. Thus our implementation was backward compatible and everybody is happy. could have been broken down as These two pieces of codes are equivalent. The above implementation is both, simple and recommended way to make properties. You will most likely encounter these types of constructs when looking for property in Python. Well that's it for today. You have successfully subscribed to Python newsletter. Get Latest Updates on Programiz You have successfully subscribed to our newsletter. It takes a lot of effort and cost to maintain Programiz. We would be grateful if you support us by either: Disabling AdBlock on Programiz. We do not use intrusive ads. or