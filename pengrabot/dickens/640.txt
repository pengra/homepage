A Turing Machine is a not a real machine, it is a theoretical idea which plays an important role in the foundations of mathematics and computer science. Turing Machine’s are useful for studying algorithms, they provide a language for describing certain abstract concepts in a precise way. A Turing Machine is capable of writing down a sequence of 0's and 1's on an infinite strip of tape; and each Turing Machine comes with a table of instructions for writing down it’s prescribed sequence. The machine has a scanner; it is “aware” so to speak of only a single square at a time; it is capable of scanning this square, and of moving the scanner one space left or right. The machine is capable of existing in a number of states, and the table of instructions tells the machine what to do next based on what state it is in, and what symbol is being scanned. The number of possible states of the machine depends on the problem which it is capable of solving. To keep track of what state the machine is in, it makes use of a private strip of tape, which is called the “state register”. The usefulness of Turing Machines derives from the fact that they model the process of computation, by breaking this process down into it’s indivisible parts. There are only 7 instructions that a Post-Turing Machine knows how to execute, and each instruction is numbered according to the following list: As an example, the Post-Turing Machine which writes down the sequence 101010… forever would begin with a strip of tape where each square has a 0 in it, and it would have the following instruction set. The reader can easily construct many other examples. A Universal Turing Machine takes as input the description number of another Turing Machine, and produces as output the same sequence of 0's and 1's as that machine, by executing the instructions in the description number one at a time. An example of an effective procedure is long division. For any two numbers, there is a Turing Machine which will do long division to calculate the result of the problem. However, since every Turing Machine corresponds to a single number, it’s description number, and since the set of all description numbers is clearly enumerable, there must exist sequences of 0's and 1's which cannot be computed by a machine. These are the so-called non-computable numbers. The Halting Problem can be stated in the following way: find the description number of a Turing Machine that takes as input the description number of a Turing Machine, and which prints 0 if the machine corresponding that that description number will run forever (in a loop), and prints 1 otherwise. The Halting Problem has no solution, because there is no effective procedure for solving this class of problems in general. To see why this is true, consider the following approximate argument: But when it checks it’s own description number it will run forever, which is a contradiction, and therefore the assumption that it is possible to solve the Halting problem must be false. Instead of a infinite strip of tape, a modern computer has an extremely large amount of memory which contains a sequence of 0's and 1's. A computer also has a system of registers it uses in the course of it’s operation, which correspond to the “state register” of a Turing Machine. The credit for inventing the modern computer belongs to many people, but this invention was only possible because of the very profound idea’s of Alan Turing on the theory of computation. These idea’s provide an important tool for analyzing algorithm’s, and measuring their complexity; and they also have a number of important applications in pure mathematics as well.