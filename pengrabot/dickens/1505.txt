Cross-site scripting (XSS) is a security bug that can affect websites. If present in your         website, this bug can allow an attacker to add their own malicious JavaScript code onto the         HTML pages displayed to your users. Once executed by the victim's browser, this code could         then perform actions such as completely changing the behavior or appearance of the website,         stealing private data, or performing actions on behalf of the user. XSS vulnerabilities most often happen when user input is incorporated into a web server's         response (i.e., an HTML page) without proper escaping or validation. So, without looking at the code, it seems that the application includes our own HTML markup         in the response. That's interesting but not terribly dangerous. If, however, the         application also allows us to inject JavaScript code, that would be much more         "interesting". We found an XSS bug! In the above scenario, an attacker would need the victim to either: It's worth noting that an XSS payload can be delivered in different ways; for example, it         could be in a parameter of an HTTP POST request, as part of the URL, or even within the web         browser cookie - basically, anywhere a user can supply input to the website. In the attack we described above, the web server echoes back the XSS payload to the victim         right away. But it is also possible for the server to store the attacker-supplied input         (the XSS payload) and serve it to the victim at a later time. This is called a "stored         XSS". Below we illustrate a basic example using a demo social networking site. Go ahead, enter         some text and share your status in the demo application below. Next, try this: What else can you do besides popping up alerts or stealing session IDs? You can pretty much         do anything JavaScript allows. Try entering the following: Take a look at the following application. It uses a URL fragment to determine which tab to         show. The application works as expected when you click on the tabs. However, it is also possible         to open a URL such as: A common technique for preventing XSS vulnerabilities is "escaping". The purpose of         character and string escaping is to make sure that every part of a string is interpreted as         a string primitive, not as a control character or code. in the HTML of a page, the script will execute. But if you include: The following can help minimize the chances that your website will contain XSS         vulnerabilities: "Auto-escaping" refers to the ability of a template system or web development framework to         automatically escape user input in order to prevent any scripts embedded in the input from         executing. If you wanted to prevent XSS without auto-escaping, you would have to manually         escape input; this means writing your own custom code (or call an escape function)         everywhere your application includes user-controlled data. In most cases, manually escaping         input is not recommended; we'll discuss manual escaping in the next section. "Context-aware" refers to the ability to apply different forms of escaping based on the         appropriate context. Because CSS, HTML, URLs, and JavaScript all use different syntax,         different forms of escaping are required for each context. The following example HTML         template uses variables in all of these different contexts: If you follow the practices from the previous section, you can reduce your risk of         introducing XSS bugs into your applications. There are, however, more subtle ways in which         XSS can surface. To mitigate the risk of these corner cases, consider the following: The following best practices can help you reduce XSS vulnerabilities in your code for         specific technologies. There is no silver bullet for detecting XSS in applications. The best way to go about         testing for XSS bugs is through a combination of: XSS is a risk wherever your application handles user input. Perform these basic tests on your application: Well, to be honestâas many of them as possible (what kind of response did you expect from         security people?). No testing methodology is foolproof; so, performing a combination of         code reviews, and manual and automated testing, will decrease the odds of a XSS         vulnerability in your application.