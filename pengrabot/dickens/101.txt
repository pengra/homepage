The idea was simple – a digital swear jar into which someone could throw 10¢ every time they uttered something... erm... unsavoury. So, no need to upgrade kernels or setup firewalls. No more OS package management or boot scripts. No building containers or managing orchestration. Okay, let's get started. As mentioned above, to make this truly end-to-end serverless, we'll make heavy use of: For this project, we'll create three Cloud Functions: The entity consists of the following three properties: Every datastore entity must have a unique key so that it can be retrieved later; let's generate an 8-letter random string. The code above parses the POST request, creates a new jar, and returns a response over HTTP. Let's try it out. Now we're ready to deploy and test the cloud function. You can also create realtime metrics from the logs, which can be graphed and alerted on. Let's create another cloud function to throw pennies into the jar. The code below looks up the jar by its 8-letter code, and increments the amount inside a datastore transaction. Datastore guarantees that operations within transactions are atomic and strongly consistent. Let's deploy and test it out. This is the last cloud function you'll need. When a user lands on a page for an existing jar, they should be able to see how much was donated. Go ahead, deploy this function and verify that it works. When you're done with this, you should end up with a single HTML file, a CSS stylesheet, and a Javascript bundle to deploy. Deploying static web assets to Google Cloud is incredibly simple. For most trivial projects, all you need are steps 1 and 2, but no production system should ignore steps 3 and 4, especially since it would take at most 20 minutes to deploy this end-to-end. Name your bucket and use the defaults for the rest of the parameters. Then copy your assets to the storage bucket. There are a few interesting things going on here. Google can cache your data in its datacenters worldwide, and serve them to the user from their nearest PoP (point-of-presence.) This significantly reduces latency for the user, and bandwidth over the trunk. Content Delivery Networks (CDNs) have historically been used for delivering large static assets such as videos and images, but more recently, with the proliferation of single-page Javascript applications, they're commonly used for serving entire application bundles. Doing this correctly requires you to hash or version your application bundles so you don't have to wait for stale caches to clear out. If you've come this far, you now have a working Penny Jar! Pat yourself on the back, and pull up your sleeves – we're not done yet. I think Datastore significantly reduces the complexity of building stateful web applications. (As I mentioned earlier, we use Datastore heavily at QUID.) It's saved our butts many times, and I highly recommend enabling it if you haven't already.