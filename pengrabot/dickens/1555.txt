One term that often comes up in relation to viruses and security are zero-day exploits, vulnerabilities and attacks. Not too long ago a seven year old Internet Explorer vulnerability was found. Sounds like a long time? It is. To help you get traction on the subject, we’ll explain to you the concept of software vulnerability, zero-day exploits and the window of opportunity. The average software application consists of an incredible amount of code. As is to be expected, a lot of code is not bullet proof at its conception. For one, bugs slip in. A lot of these bugs are relatively harmless (relative being the key word) – they create a deadlock and cause the application to freeze, or make the application misbehave under certain irregular conditions. A more serious security risk arises from the presence of exploitable bugs, or software vulnerabilities. Software vulnerabilities compromise the security of the computer system. Sneaking in through the cracks provided by flawed or insufficiently protected code, malign individuals are sometimes able to execute their own code under the guise of a computer’s own user, or access restricted data (just to name a few of the possibilities). Simply put, a software vulnerability is a flaw in the software’s design or implementation that can potentially be exploited. A zero-day exploit gives the attacker an unprecedented advantage. Because the developer had no knowledge of the exploit, they’re not able to develop a fix and users of the application are entirely without protection. Until the attack is noticed and recorded, even conventional virus scanners are of little use. The vulnerability window describes the time between a vulnerability is first exploited and the developer of the application pushes a patch. This follows a distinct timeline. After reading the article, how does the seven year old Internet Explorer vulnerability sound? Due to a lack of data, we can’t say for sure how big the vulnerability window exactly was, but it likely wasn’t small. Let us know your thoughts in the comments section below the article! Enjoyed this article? Stay informed by joining our newsletter! How does a hacker find the weak points of a software program? One way to figure out weak points is to try to trigger craches. Program bugs are often also the weak points. Another possibility is to use a debugging program and try to learn something from the machine code. Great Explanation Simon .. Cheers :) Great article. Please add to your front page an article about the new Java exploit that even the U.S. Department of Homeland Security has made a priority of alerting computer users about. Tech blogger Leo Laporte was mentioned on tonight's NBC News talking about how it is imperative to disable Java (not Java Script but the Java plugin) in your web browser. Hopefully MUO readers are aware of this but it's still well worth covering and telling them about it. The name "Zero Day Exploit" comes from the fact that attackers give the developers zero days notice before releasing an attack (or information about the exploit). Short but informative article. Thanks for the interesting info. So what i`m wondering is that the Internet security software do not give enough protection in this aspect, right? For the average consumer, the best thing you can do is to keep your applications updated. The ill will towards updates is the main reason patch deployment takes so long. How if the newest update actually has more vulnerabilities in addition of the old one? Does anything like this ever happen? Antivirus software isn't always useless in the case of zero day exploits. Heuristic analysis is a big part of system protection, and if a new exploit has similar behaviour to a previous exploit then it's more than possible it will be blocked. Great Info..% I'm a writer and computer sciences student from Belgium. You can always do me a favor with a good article idea, book recommendation, or recipe idea.