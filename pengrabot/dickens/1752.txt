The bottom line is that exhaustion does apply to software and downloading is an authorized transfer within the meaning of the Exhaustion Doctrine. The defence Cascades could have raised is that Samsung didn‚Äôt just download code from Google, they also copied the code they downloaded and those copies should be covered under the patent right to exclude manufacture, which didn‚Äôt exhaust with the download.  To illustrate this in the Alice, Bob, Charlie chain: Alice sells an item to Bob and thus exhausts the patent so Bob can sell it on to Charlie unencumbered.  However that exhaustion does not give either Bob or Charlie the right to manufacture a new copy of the item and sell it to Denise because exhaustion only applies to the same item Alice sold, not to a newly manufactured copy of that item. The copy as new manufacture defence still seems rather vulnerable on two grounds: first because Samsung could download any number of exhausted copies from Google, so what‚Äôs the difference between them downloading ten copies and them downloading one copy and then copying it themselves nine times.  Secondly, and more importantly, Cascades already had a remedy in copyright law: their patent licence to Google could have required that the AOSP copyright licence be amended not to allow copying of the source code by non-Google entities except on payment of royalties to Cascades.  The fact that Cascades did not avail themselves of this remedy at the time means they‚Äôre barred from reclaiming it now via patent action. The bottom line is that distribution exhausts all patents reading on the code you distribute is a very reasonable defence to maintain in a patent infringement lawsuit and it‚Äôs one we should be using much more often. This is much more controversial and currently has no supporting case law.  The idea is that Distribution can occur even with only incremental updates on the existing base (git pull to update code, say), so if delta updates constitute and authorized transfer under the exhaustion doctrine, then so must a patch based contribution, being a delta update from a contributor to the project, be an authorized transfer.  In which case all patents which read on the project at the time of contribution must also exhaust when the contribution is made. Even if the above doesn‚Äôt fly, it‚Äôs undeniable most contributions today are made by cloning a git tree and republishing it plus your own updates (essentially a github fork) which makes you a bona fide distributor of the whole project because it can all be downloaded from your cloned tree.  Thus I think it‚Äôs reasonable to hold that all patents owned by distributors and contributors in an open source project have exhausted in that project. In other words all the arguments about the scope and extent of patent grants and patent capture in open source licences is entirely unnecessary. Therefore, all active participants in an Open Source community ipso facto exhaust any patents on the community code as that code is redistributed. Firstly, it‚Äôs important to note that the exhaustion arguments above have no impact on the the patentability of software or the validity of software patents in general, just on their enforcement. Secondly, exhaustion is triggered by the unencumbered right to redistribute which is present in all Open Source licences. However, proprietary software doesn‚Äôt come with a right to redistribute in the copyright licence, meaning exhaustion likely doesn‚Äôt trigger for them. Thus the exhaustion arguments above have no real impact on the ability to enforce software patents in proprietary code except that one possible defence that could be raised is that the code practising the patent in the proprietary software was, in fact, legitimately obtained from an open source project under a permissive licence and thus the patent has exhausted. The solution, obviously, is that if you worry about enforceability of patents in proprietary software, always use a copyleft licence for your open source. The hope this offers for the Troll problem is that in 10 years time, all these unexhausted patents will have expired and thanks to the onward and upward adoption of open source there really will be no place for Trolls to acquire unexhausted patents to use against the software industry, so the Troll threat is time limited. Your mission, should you choose to be part of this project, is to help advance the legal doctrines on patent exhaustion.  In particular, if the company you work for is sued for patent infringement in any Open Source project, even by a troll, suggest they look into asserting an exhaustion based defence.  Even if your company isn‚Äôt currently under threat of litigation, simply raising awareness of the option of exhaustion can help enormously. If we get this right, in 10 years the Patent threat in Open Source could be history, which would be a nice little legacy to leave our children. Not patent exhaustion as such, but there was a patent case before the Supremes not that long ago. Iirc it was a *pro* software patents judge who opined that ‚Äúin this case the software clearly is not patentable. I don‚Äôt want to close the door to software patents but I cannot currently conceive of any software that could pass the bar for patentability‚Äù. That‚Äôs obviously another door to push at ‚Ä¶ üôÇ As I‚Äôve been saying for some years now, each piece of software is a idea, an idea that can do nothing by itself. Take a piece of software that purports to transform ‚ÄòX‚Äô into ‚ÄòY‚Äô. Lay that software on the floor atop, beneath or beside an ‚ÄòX‚Äô. Now wait for ‚ÄòX‚Äô to be transformed into ‚ÄòY‚Äô. You‚Äôll wait a blessedly long time. But what software do you lay on the floor? Do you lay down a paper listing of the source code? Well, no, because (1) source code (compile or interpreted) cannot operate on its own, and (2) the listing is just markings on paper. Do you lay down a CD, DVD or other storage device that conains the compiled code‚Äìor the source code to be interpreted‚Äìin digital form? Well, no, because of (1) above, and (2) the software is just pits or phase differences on an optical medium, stored charges in flash memory, or magnetic charges on a disk platter. I challenge all readers of this post to hold a true and actual bit‚Äìor a  byte, block or other collection of bits‚Äìin their hands, or to view them with their eyes. They cannot‚Äìnor can I‚Äìbecause bits, bytes, blocks, and other collections of bits are intangible; digital data cannot be seen, touched, smelled, heard or tasted. They can only be *thought*, and as such, they are only ideas which, by law, are covered by copyrights, not patents. All software patents are invalid.