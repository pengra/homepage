 This article shows how to define models for the LocalLibrary website. It explains what a model is, how it is declared, and some of the main field types. It also briefly shows a few of the main ways you can access model data. Before you jump in and start coding the models, it's worth taking a few minutes to think about what data we need to store and the relationships between the different objects. We know that we need to store information about books (title, summary, author, written language, category, ISBN) and that we might have multiple copies available (with globally unique id, availability status, etc.). We might need to store more information about the author than just their name, and there might be multiple authors with the same or similar names. We want to be able to sort information based on book title, author, written language, and category. When designing your models it makes sense to have separate models for every "object" (group of related information). In this case the obvious objects are books, book instances and authors. You might also want to use models to represent selection-list options (e.g. like a drop down list of choices), rather than hard coding the choices into the website itself — this is recommended when all the options aren't known up front or may change. Obvious candidates for models in this case include the book genre (e.g. Science Fiction, French Poetry, etc.) and language (English, French, Japanese). With that in mind, the UML association diagram below shows the models we'll define in this case (as boxes). This section provides a brief overview of how a model is defined and some of the more important fields and field arguments. In the below sections we'll explore each of the features inside the model in detail: A model can have an arbitrary number of fields, of any type — each one represents a column of data that we want to store in one of our database tables. Each database record (row) will consist of one of each field value. Let's look at the example seen below: The order that fields are declared will affect their default order if a model is rendered in a form (e.g. in the Admin site), though this may be overridden. The following common arguments can be used when declaring many/most of the different field types: The following list describes some of the more commonly used types of fields. So as an example, if we chose to sort books like this by default: the books would be sorted alphabetically by title, from A-Z, and then by publication date inside each title, from newest to oldest. Other useful attributes allow you to create and apply new "access permissions" for the model (default permissions are applied automatically), allow ordering based on another field, or to declare that the class is "abstract" (a base class that you cannot create records for, and will instead be derived from to create other models). Many of the other metadata options control what database must be used for the model and how the data is stored (these are really only useful if you need to map a model to an existing database). A model can also have methods. Of course to make this work you still have to write the URL mapping, view, and template! You can also define any other methods you like, and call them from your code or templates (provided that they don't take any parameters). Once you've defined your model classes you can use them to create, update, or delete records, and to run queries to get all records or particular subsets of records. We'll show you how to do that in the tutorial when we define our views, but here is a brief summary. Some of the fields and methods will now be familiar. The model uses We additionally declare a few new types of field: All your models have now been created. Now re-run your database migrations to add them to your database. Imagine a local benefactor donates a number of new books written in another language (say, Farsi). The challenge is to work out how these would be best represented in our library website, and then to add them to the models. Some things to consider: Don't forget that after a change to your model, you should again re-run your database migrations to add the changes.    Get the latest and greatest from MDN delivered straight to your inbox. If you haven’t previously confirmed a subscription to a Mozilla-related newsletter you may have to do so. Please check your inbox or your spam filter for an email from us. © 2005-2019 Mozilla and individual contributors.