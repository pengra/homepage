Shana Pearlman API stands for Application Programming Interface. An API is a software intermediary that allows two applications to talk to each other.  In other words, an API is the messenger that delivers your request to the provider that you’re requesting it from and then delivers the response back to you. Developers are now much more productive than they were before since they had to write a lot of code from scratch. With an API they don’t have to reinvent the wheel every time they write a new program. Instead, they can focus on the unique proposition of their applications while outsourcing all of the commodity functionality to APIs. One of the chief advantages of APIs is that they allow the abstraction of functionality between one system and another. An API endpoint decouples the consuming application from the infrastructure that provides a service. As long as the specification for what the service provider is delivering to the endpoint remains unchanged, the alterations to the infrastructure behind the endpoint should not be noticed by the applications that rely on that API. Therefore the service provider is given a great deal of flexibility when it comes to how its services are offered. For example, if the infrastructure behind the API involves physical servers at a data center, the service provider can easily switch to virtual servers that run in the cloud. If the software running on those servers (such as credit card processing software) is written in, say, Java running on an Oracle-based Java application server, the service provider can migrate that to Node.js (server-side Javascript) running on Windows Azure. Imagine a waiter in a restaurant.  You, the customer, are sitting at the table with a menu of choices to order from, and the kitchen is the provider who will fulfill your order. You need a link to communicate your order to the kitchen and then to deliver your food back to your table. It can’t be the chef because she’s cooking in the kitchen. You need something to connect the customer who’s ordering food and the chef who prepares it.  That’s where the waiter — or the API —  enters the picture. The waiter takes your order, delivers it to the kitchen, telling the kitchen what to do. It then delivers the response, in this case, the food, back to you. Moreover, if it’s designed correctly, hopefully, your order won’t crash! When you search for flights online, you have a menu of options to choose from. You choose a departure city and date, a return city and date, cabin class, and other variables like your meal, your seat, or baggage requests. To book your flight, you need to interact with the airline’s website to access the airline’s database to see if any seats are available on those dates, and what the cost might be based on the date, flight time, route popularity, etc. You need access to that information from the airline’s database, whether you’re interacting with it from the website or an online travel service that aggregates information from multiple airlines. Alternatively, you might be accessing the information from a mobile phone. In any case, you need to get the information, and so the application must interact with the airline’s API, giving it access to the airline’s data. The API is the interface that, like your helpful waiter, runs and delivers the data from the application you’re using to the airline’s systems over the Internet. It also then takes the airline’s response to your request and delivers right back to the travel application you’re using. Moreover, through each step of the process, it facilitates the interaction between the application and the airline’s systems – from seat selection to payment and booking.  Sign up for our newsletter Syed Bilal September 12th 2016 This post has explained API’s overall  detailed information.Its provided useful information (abstracted).For beginners ,it is worthful and given pointful manner. Ken Tien September 12th 2016 Awesome, glad you enjoyed our API post Syed. katherine tk August 27th 2018 Akbar hussain December 4th 2016 Good Info on APIs Strahinja November 22nd 2017 Fantastic article! Short but detailed. I would have liked to see more articles regarding types of APIs like SOAP & REST in Related Posts area Bijan Shahir December 25th 2017 Great article.  I learned a lot about API – and the links are great, too. Thank you. Varun Srivastava December 27th 2017 Asha April 10th 2018 Very useful Information. Thanks for sharing it. MaryM April 4th 2018 This is the first time I have seen a clear example(s) of How APIs work.  Thank you!!!!  I needed to try and explain this to a non-tech person and not being a tech person myself, I needed to understand this process first.   Thank you so much Abhijeet Raj August 18th 2018 Really, this helps me a lot to understand the API’s functionality and what it works. Vikas August 23rd 2018 Awesome post Denise Como October 31st 2018 This was EXTREMELY useful in understanding how API’s work.  It makes complete sense to me now, your examples were so helpful!  Thanks so much for providing this information. Denise Sonam Varma November 9th 2018 Thank you for the article. It really helped me understand API. I really appreciate you explaining it all in simple words. Subbu November 21st 2018 Very Useful. Very lucid and very simply explained. Knowledge shows!! Vaishal Dhir February 12th 2019 This post is really helpful. Paul Pomeroy March 24th 2019 I am getting pop ups from Malwarebytes and I have tried to delete without success. I see I have many api’s and how can I identify if this is my problem.  As far as I know I don’t use api’s for any purpose.  How can I safely delete the cause, if this is it, without damaging my limited normal use of Wind 10? Thanks