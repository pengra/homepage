Mapping is a fundamental functional programming technique for operating on all of the elements in an array and producing another array of the same length with transformed contents. To make that a little bit more concrete, let’s come up with a simple use case. For example, imagine that you have an array of words, and you need to transform that into an array that contains the length of each word. (I know, that’s not the sort of complex rocket science you often need to do for your sophisticated application, but understanding how it works in a simple case like this will help you apply it in cases where it can add real value to your code). See how clean that looks? Just making mapping part of your toolkit can take your code to a whole new functional level. As a point of interest, by adding mapping to the array object, ECMAScript 5 turned the basic array type into a full functor, making functional programming even more accessible to all of us. According to classical functional programming definitions, a functor meets three criteria: That’s one to toss around at your next JavaScript Meetup. This is a little longer, but longer isn’t always a bad thing. Seeing it this way should make it a little bit clearer what’s happening with the reduce method. © 2000 – 2019 SitePoint Pty. Ltd.