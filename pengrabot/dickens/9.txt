Forth has been called lots of things and it was something that I figured we could easily unikernelize so I dove into it. I think it's safe to say I've never written any production Forth nor do I see myself doing so but having said that - let's begin! Like Go (the game, not the language) Forth is considered easy to learn but difficult to master. It's commonly used on hardware that doesn't have the notion of an operating system as we view them as. Hhrm... kinda reminds me of something. Forth is an interesting usecase for unikernels because unikernels being minimalisitc by nature fit right in and Forth has been traditionally deployed on devices that are resource constrained. Some interesting but by no means complete Forth properties: It has this interesting lispy property where you can start crafting your own language inside the interepter as you are typing it. As an old HP48G+ calculator owner before the TIs took over Forth also embraces postfix notation. If you've never learned to do math this way you are missing out. Most of us are used to doing math via infix: eg: A + B However there are many different ways of expressing this. We can express it via prefix notation: + A B We can express it via infix notation: A + B Or we can express it via postfix notation: A B + Of course you don't need to choose between the (better) HP48G+ and the TI89 to understand this concept. Chances are you've already been quizzed about this in various interview settings. Stacks? Queues made out of stacks? How about those pre-order/post-order tree traversals? Anyways enough about postfix notation - what does this mean for forth unikernels? It sounds like a great fit is what it means! Enough of the pep talk - let's code! First - put this into hi.fth: Great - now let's run it - using ops when can go ahead and download the gforth package, create a unikernel and run it. Interesting! Also interesting - you can see my right now my toy programs are still clocking in at around 8 megabytes: ...and if you're new to this blog - that's an entire disk image - you can take that and go boot it on AWS or GCloud and run it. Happy Hacking! Introducing the future cloud. Ready for the revolution in operating systems we've all been waiting for? Copyright Â© 2018 NanoVMs Inc. All rights reserved.