Rise of the Machines: AI and Security – Free Webinar with Checkmarx’ CTO Software Exposure is the new unknown. But not for long. Manage Software Exposure at the Speed of DevOps Gartner Magic Quadrant for Application Security Testing, 2018 The Complete Guide to Developer Secure Coding Education CISO of Brussels Airlines answers "Why Checkmarx?" Gartner Magic Quadrant for Application Security Testing, 2018 Checkmarx is pioneering Software Exposure Software Exposure is the new unknown. But not for long. Manage Software Exposure at the Speed of DevOps Gartner Magic Quadrant for Application Security Testing, 2018 The Complete Guide to Developer Secure Coding Education CISO of Brussels Airlines answers "Why Checkmarx?" Gartner Magic Quadrant for Application Security Testing, 2018 Checkmarx is pioneering Software Exposure    XSS attacks, in essence, trick an application into sending malicious script through the browser, which believes the script is coming from the trusted website. Each time an end user accesses the affected page, their browser will download and run the malicious script as if it was part of the page. In the majority of XSS attacks, the attacker will try to hijack the user’s session by stealing their cookies and session tokens, or will use the opportunity to spread malware and malicious JavaScript.  XSS vulnerabilities are difficult to prevent simply because there are so many vectors where an XSS attack can be used in most applications. In addition, whereas other vulnerabilities, such as SQL injection or OS command injection, XSS only affects the user of the website, making them more difficult to catch and even harder to fix. Also unlike SQL injection, which can be eliminated with the proper use of prepared statements, there’s no single standard or strategy to preventing cross-site scripting attacks.  There are two main types of cross-site scripting attacks: Stored (or persistent) XSS, which is when malicious script is injected directly into the vulnerable application, and reflected XSS, which involves ‘reflecting’ malicious script into a link on a page, which will activate the attack once the link has been clicked.    Preventing XSS: 3 Ways to Keep Cross-Site Scripting Out of Your Apps  So, now that we understand a bit more about what cross-site scripting attacks are and how damaging they can be to your application, let’s dive into the best known practices in preventing them in the first place.   1. Escaping  The first method you can and should use to prevent XSS vulnerabilities from appearing in your applications is by escaping user input. Escaping data means taking the data an application has received and ensuring it’s secure before rendering it for the end user. By escaping user input, key characters in the data received by a web page will be prevented from being interpreted in any malicious way. In essence, you’re censoring the data your web page receives in a way that will disallow the characters – especially < and > characters – from being rendered, which otherwise could cause harm to the application and/or users.  If your page doesn’t allow users to add their own code to the page, a good rule of thumb is to then escape any and all HTML, URL, and JavaScript entities. However, if your web page does allow users to add rich text, such as on forums or post comments, you have a few choices.  You’ll either need to carefully choose which HTML entities you will escape and which you won’t, or by using a replacement format for raw HTML such as Markdown, which will in turn allow you to continue escaping all HTML.   2. Validating Input      3. Sanitizing  A third way to prevent cross-site scripting attacks is to sanitize user input. Sanitizing data is a strong defense, but should not be used alone to battle XSS attacks. It’s totally possible you’ll find the need to use all three methods of prevention in working towards a more secure application. Sanitizing user input is especially helpful on sites that allow HTML markup, to ensure data received can do no harm to users as well as your database by scrubbing the data clean of potentially harmful markup, changing unacceptable user input to an acceptable format.   Additional resources: Sarah is in charge of social media and an editor and writer for the content team at Checkmarx. Her team sheds light on lesser-known AppSec issues and strives to launch content that will inspire, excite and teach security professionals about staying ahead of the hackers in an increasingly insecure world. Your Smart Scale is Leaking More than Your Weight: Privacy Issues in IoT AppSec Is Dead, but Software Security Is Alive & Well Navigation Apps: Leading the Way? Or Following You? Sign up today & never miss an update from the Checkmarx blog