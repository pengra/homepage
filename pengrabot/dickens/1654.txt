Your script works great! Cheers! this is so cool , i like it This was even better for my needs. No issues with special characters etc… That is awful advice! If for some reason (like malicious intent of users) the html argument contains a script tag, you’ve now opened up for XSS attacks!!! Don’t use the DOM for something that doesn’t require it. hey!!!..this is so ridiculous.. Thank you for great example Thanks, this does exactly what I need (and so concisely, too!) Thanks!  A quick note about the regexp: the “i” isn’t needed here because there are no characters to be case-insensitive about.  However, it does exactly what you want either way. Nice, but the parentheses are unnecessary. .replace(/<[^>]+>/ig,””); Thanks Hi :) A french reader, Florian Thank for script :) @Ricard: If you want to make a copy of the contact form, just view source or save this page to you local ;) beautul site thank you for great example DScout, this is incorrect. There are no specified alphabetical characters in the regular expression – the case insensitivity modifier therefore affects nothing. Hi I have following code: What i want to do is to remove or strip all HTML tags and to get plain text out of that markup. Kindly let me know if there is any solution. Thanks works great but doest strip whitespaces…. Yeah, this solution removed all sorts of HTML, paragraph, line breaks, in-line styles etc etc This does not works for IE. Please provide solution to strip tag  in javascript that works for all browsers i am trying it on var message; but it is not working and saying cannot call method ‘replace’ of undefined This was excellent! Thanks! your “\S” is missing… or not? \S means not whitespace, and ^> means not greater than, so your modified regex only ensures that single character tags will not be replaced. Great! Thanks! Cool! This is perfectly working… What about < b r / > or < h r / > (the self closing tags) ? Cool……Nice Example. Looks like “newInput” doesn’t do anything at all?  So it’s either extraneous or there’s a problem with the code. Nice, but it’s not that safe… I’d rather use jQuery: $("<div/>").text('<img alt="a>b" src="a_b.gif" />').text(); document.body.innerText <a onclick=”return  a > b”> ~ fail But this code is not working well with HTML table content. How can strip all tags except anchor and img tags? You can easily leave out the case sensitivity /i and the grouping (): not working with AngularJS. Probably the simplest probably I found online. Thanks a bunch for it. Worked just fine! Doesn’t anyone see how this solution greatly affects this text: Rounded amounts < 3 are way easier for people to use in calculations, since they are so tiny than numbers that are  >=3 Becomes: Rounded amounts =3 This one is better; phpjs.org/functions/strip_tags/ Safe way to use the DOM to strip html. I chucked together a function that allows some tags to be kept, similar to how the php function works. As with PHP it comes with the following two caveats: Because strip_tags() does not actually validate the HTML, partial or broken tags can result in the removal of more text/data than expected. and This function does not modify any attributes on the tags that you allow using allowable_tags, including the style and onmouseover attributes that a mischievous user may abuse when posting text that will be shown to other users. Additional checks have been implemented to prevent invalid tags from being removed where possible, by ensuring that the opening of each tag starts with a potential tag name; it does not account for greater than symbols within attributes. Comments will be retained but can be removed with a similar regex. For this I use the function: Here all tags are deleted. But I want to keep the and tags and found these two separate functions that worked for me: Do you know how to combine the two conditions in one? This not only removes the offending characters, but also the rest of the text. What’s the HTML you’re working with? A good start is to sign up for our weekly hand-written newsletter. We bring you the best articles and ideas from around the web, and what we think about them.