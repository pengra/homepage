An operator is a symbol that tells the compiler to perform specific mathematical or logical functions. C language is rich in built-in operators and provides the following types of operators − We will, in this chapter, look into the way each operator works. Show Examples Show Examples Show Examples Bitwise operator works on bits and perform bit-by-bit operation. The truth tables for &, |, and ^ is as follows − Assume A = 60 and B = 13 in binary format, they will be as follows − A = 0011 1100 B = 0000 1101 ----------------- A&B = 0000 1100 A|B = 0011 1101 A^B = 0011 0001 ~A = 1100 0011 The following table lists the bitwise operators supported by C. Assume variable 'A' holds 60 and variable 'B' holds 13, then − Show Examples The following table lists the assignment operators supported by the C language − Show Examples Show Examples Operator precedence determines the grouping of terms in an expression and decides how an expression is evaluated. Certain operators have higher precedence than others; for example, the multiplication operator has a higher precedence than the addition operator. For example, x = 7 + 3 * 2; here, x is assigned 13, not 20 because operator * has a higher precedence than +, so it first gets multiplied with 3*2 and then adds into 7. Here, operators with the highest precedence appear at the top of the table, those with the lowest appear at the bottom. Within an expression, higher precedence operators will be evaluated first. Show Examples © Copyright 2019. All Rights Reserved.