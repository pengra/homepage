An operator is a symbol that tells the compiler to perform specific mathematical or logical manipulations. C# has rich set of built-in operators and provides the following type of operators − This tutorial explains the arithmetic, relational, logical, bitwise, assignment, and other operators one by one. Show Examples Show Examples Show Examples Bitwise operator works on bits and perform bit by bit operation. The truth tables for &, |, and ^ are as follows − Assume if A = 60; and B = 13; then in the binary format they are as follows − A = 0011 1100 B = 0000 1101 ------------------- A&B = 0000 1100 A|B = 0011 1101 A^B = 0011 0001 ~A  = 1100 0011 The Bitwise operators supported by C# are listed in the following table. Assume variable A holds 60 and variable B holds 13, then − Show Examples There are following assignment operators supported by C# − Show Examples Show Examples StringReader r = obj as StringReader; Operator precedence determines the grouping of terms in an expression. This affects evaluation of an expression. Certain operators have higher precedence than others; for example, the multiplication operator has higher precedence than the addition operator. For example x = 7 + 3 * 2; here, x is assigned 13, not 20 because operator * has higher precedence than +, so the first evaluation takes place for 3*2 and then 7 is added into it. Here, operators with the highest precedence appear at the top of the table, those with the lowest appear at the bottom. Within an expression, higher precedence operators are evaluated first. Show Examples © Copyright 2019. All Rights Reserved.