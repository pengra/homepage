If you use Django for your web apps, you will probably have come across a situation where you need to run some custom code on assigning a value to a model field. You’ve probably hacked around this by overriding the save() method or some other arcane hackery, but this is not only unnecessary, but it’s more complicated than it should be. Since you can’t just create a getter and a setter with the same name as the field (Django will be confused, as it will only see the method and not the shadowed field), you can rename the field. My preferred solution is to prepend the field with an underscore, but still keep the same field column name, to keep everything working as it used to. So if, for example, you have a date field that you need to run some additional logic on, you can do the following: If the original model looks like this: You can add a property like so: This way, the entire codebase can stay as-is, without needing to be updated at all. You can even remove the original field and replace it with other functionality, faking it entirely, or remove the properties in the future when you don’t need the custom behavior. It’s perfectly backwards- and forwards-compatible, and very easy to do. Did you like what you just read and want to be notified when I post more? Subscribe         to my mailing list to get updates on my posts and other random goodies. Greek. Amateur F1 driver. Technology enthusiast. Single parent. Liar.