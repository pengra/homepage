The fixed combinator may be used in a number of different areas, Fixed point combinators may be applied to a range of different functions, but normally will not terminate unless there is an extra parameter.  When the function to be fixed refers to its parameter, another call to the function is invoked, so the calculation never gets started.  Instead, the extra parameter is used to trigger the start of the calculation. The type of the fixed point is the return type of the function being fixed.  This may be a real or a function or any other type. Alternately a function may be considered as a lambda term defined purely in lambda calculus. In contrast a person only wanting to apply a fixed point combinator to some general programming task may see it only as a means of implementing recursion. Every expression has one value.  This is true in general mathematics and it must be true in lambda calculus.  This means that in lambda calculus, applying a fixed point combinator to a function gives you an expression whose value is the fixed point of the function. For example, consider, For the lambda calculus mathematician, this is a consequence of the definition of lambda calculus.  For the programmer, it means that the beta reduction of the lambda term will loop forever, never reaching a normal form. A lambda calculus function (or term) is an implementation of a mathematical function.  In the lambda calculus there are a number of combinator (implementations) that satisfy the mathematical definition of a fixed-point combinator. Usually when applied to functions of one parameter, implementations of the fixed point combinator fail to terminate.  Functions with extra parameters are more interesting. This version of the equation must be shown consistent with the previous by the definition for equality of functions, By repeatedly applying this equality we get, gives, Also using, gives gives, gives, gives, This is possibly the simplest implementation of a fixed point combinator in lambda calculus.  However one beta reduction gives the more symmetrical form of Curry's Y combinator. although note that it is not in normal form, which is longer. This combinator corresponds to the lambda expression The following fixed-point combinator is simpler than the Y combinator, and Î²-reduces into the Y combinator; it is sometimes cited as the Y combinator itself: It also has a simple call-by-value form: where, Note that the Y combinator is a particular implementation of a fixed point combinator in lambda calculus.  Its structure is determined by the limitations of lambda calculus.  It is not necessary or helpful to use this structure in implementing the fixed point combinator in other languages. For examples of implementations of the fixed point combinators in various languages see, This may be resolved by defining fix with an extra parameter. which lets us write: Or equivalently in OCaml: Other functions have the special property that after being applied once, further applications don't have any effect. More formally: where the resulting term can only reduce to itself and represents an infinite loop.