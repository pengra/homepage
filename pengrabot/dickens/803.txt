During the load of unoptimized page, chances are a user will see a “white screen” before the full page is then loaded. An optimized page load (render actually) happens in a more step-by-step way, allowing a user to see some content gradually until page the page loads fully. With a little research via Google, we can see how load order impacts user focus:  Line breaks, additional spaces, comments etc.—all of this increases the size of a JavaScript file and affects the speed of page load. Compressing the code solves this issue well. Machines are not sensitive to the visual style of code like a human would be. Computers can read and launch minified code, even if all of your Javascript fits in just one string. Optimization is a special type of JavaScript minification. These kind of minimizers not only delete unuseful white spaces, commas, comments etc. but also help to avoid ‘dead code’: Before optimization: After optimization: What exactly did optimization accomplish? Asynchronous loading of JavaScript is a type of sync loading. It means that your website loads in a multi-streamed way. To understand this point a little better, take a look at this code: Use caution if your JavaScript must make some manipulations to the HTML or CSS, or if you’re loading a script in a strong order (e.g., jQuery-dependent libraries). In this case, 2.js will not be loaded until 1.js is loaded, and so on. Most developers use libraries like jQuery UI or jQuery Mobile as is. This means that the code includes all possible components of each library, when you may only need two or three. A similar situation occurs with other JavaScript libraries as well. If you have the ability to manage what components will be included in your package of library, definitely do it. Your website will load much faster, and your visitors will get a better experience. {{ profile.shortName }} {{ profile.title }} Sign Up It’s super fast and easy to set up: Use it a few ways, like the following: There’s a special type of JavaScript code optimization, variables inlining, that’s essentially related to gzip. Let’s look at an example below. Before optimization: After optimization: Basically, you can see that the optimized code became longer because the variables mes were perlased with its value. What Gzip does is to find repeating elements and replace them with small ‘symbols’ from the archive dictionary so that the final code after optimization and gzip isn’t bulkier, despite optimization. HTML: CSS Caching is important, especially for JavaScript—not just JavaScript files, but framework functions, too. Here’s a sample to try: Code without cache: Code with cache: Results of running: © 2015 - 2019 Upwork Global Inc. To access essential Upwork features, you'll need to update your browser.