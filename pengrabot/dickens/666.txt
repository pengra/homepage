Nowadays many applications either small or complex use the finite state machine (FSM). A finite state machine in c is one of the popular design patterns for the embedded system.A finite state machine makes the development easy and smooth. There are a lot of devices which use event base states, like coffee machine, vending machine, POS devices, door lock system etc. Some POS devices are used the event table in which events are registered with an event handler.This event handler executes when the relevant events come. A finite state machine can have multiple states, it can switch from one state to another state on the basis of internal or external input.This input could be timer expiry signal, hardware or software interrupt .. etc. In the finite state machine, the procedure to change one state to another state is called transition. In this article, I will describe some approaches for implementing a state machine in C. For example, I am considering ATM machine and creating its sample state machine in C. The state of ATM machine could be changed through the coming events.I have mentioned below the sample stats of ATM machine. Initially, ATM machine would be in the Idle state, When a user inserts the card then it change their state and processes the card. After the card processing, ATM again changes their state and ask the user to enter the pin number.When the user entered the pin then it asks for choice ( Balance inquiry, withdrawal, Deposit) and after that change the state and ask to enter the amount and dispatch the entered amount. Above figure describe the states of the ATM machine. There are two most popular approaches for implementing an event-based state machine in C. The selection of both approaches depends on requirement and situation. In below sample code, I am verifying the states first and after that checks the triggered event.If you want you can reverse the procedure that means you can check event first and after that checks the states. It is the simplest way to implement the state machine, using this technique we can reduce the length of the code. The most important feature of this technique in future if you want to add any new states or events, we can easily integrate with it without any huge hurdle. Let’s see an example, One thing needs to remember, here table is sparse, if the states and events are increasing, this technique increases the wastage of the memory. So before creating the state machine diagram we need to account all the things very precisely at the beginning of the design.  Nice article on the basics. Thank you Thank you John.. In this article ReadEvent() behaves like the third party or standard library which returns the current occurred event. For example, In POS device we have read function which when you pressed the key, swipe the card or insert the card then it returns relevant event value. On the basis of this event value, you call the relevant function, like when you swipe the card in POS device then an event value (MAG_CARD_EVENT) return by the read function. It is not vary for program but vary with device, each device have their own API to read the events. got it. Thank you There are a lot of magazines which is published the article regarding the Finite state machine. }sStateMachine; do you really need to include the “eSystemState eStateMachine; ” in this structure, in fact I don’t see you using that any where. the next state is determined by the array index rather than the “eSystemState eStateMachine; ” variable. In the below code, you have placed the array elements aligning with the enumeration values. sStateMachine asStateMachine [] = { {Idle_State,Card_Insert_Event,InsertCardHandler}, {Card_Inserted_State,Pin_Enter_Event,EnterPinHandler}, {Pin_Eentered_State,Option_Selection_Event,OptionSelectionHandler}, {Option_Selected_State,Amount_Enter_Event,EnterAmountHandler}, {Amount_Entered_State,Amount_Dispatch_Event,AmountDispatchHandler} }; I suppose you’ve created an additional variable just to avoid confusion while creating the table. thanks I am not able to write the read_event() for my state machine program . Can you please help me Concerning the ATM machine of this example suppose to have to manage more than one single transition from each state. Suppose to be into the Idle State and no event occur, I suppose to have to add another entry into the asStateMachine, name it with Nothing_To_Do_Event (of course I’ve also to add it to the eSystemEvent struct): Now when I’m into the main loop I suppose to have also to change the selection logic for the next state because I can have more than a single entry for each state, so the main function has to rewritten in a similar way: int i=0; // … other stuff here … } make sense? Thank! I think this line eNextState = (*asStateMachine[eNextState].pfStateMachineEventHandler)(); should be eNextState = (*asStateMachine[i].pfStateMachineEventHandler)(); Before changing it, you code didn’t follow the ATM state transitions. Enter the destination URL Or link to existing content