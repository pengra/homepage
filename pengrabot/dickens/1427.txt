Theoretical Computer Science is mathematical and abstract in spirit, but it derives its motivation from practical and everyday computation. Its aim is to understand the nature of computation and, as a consequence of this understanding, provide more efficient methodologies. All papers introducing or studying mathematical, logic and formal concepts and methods are welcome, provided that their motivation is clearly drawn from the field of computing.Papers published in Theoretical Computer Science are grouped in two sections according to their nature. One section 'Algorithms, automata, complexity and games' is devoted to the study of algorithms and their complexity using analytical, combinatorial or probabilistic methods. It includes the whole field of abstract complexity (i.e. all the results about the hierarchies that can be defined using Turing machines), the whole field of automata and language theory (including automata on infinite words and infinitary languages), the whole field of geometrical (graphic) applications and the whole field of measurement of system performance using statistical methods. The subsection Mathematical Games is devoted (but not restricted) to the mathematical and computational analysis of games. It also covers connections or applications of games to areas such as complexity, graph and matroid theory, networks, coding theory, logic and surreal numbers.The other section, 'Logic, semantics and theory of programming', is devoted to formal methods to check properties of programs or implement formally described languages; it contains all papers dealing with semantics of sequential and parallel programming languages. All formal methods treating these problems are published in this section, including rewriting techniques, abstract data types, automatic theorem proving, calculi such as SCP or CCS, Petri nets, new logic calculi and developments in categorical methods. Data provided are for informational purposes only. Although carefully collected, accuracy cannot be guaranteed.