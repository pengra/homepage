One situation where bloom filters can make a large difference is when you are using super keys to support incremental updates to an index.  Here you have a main index containing the bulk of the data and multiple smaller indexes which contain incremental updates.  Unfortunately, finding matches in the index requires that each of the indexes in the superkey are searched, so the time taken can be proportional to the number of indexes in the superkey.  Bloom filters allow many of the incremental index parts to be skipped, since the incremental updates only include a small subset of the values, significantly reducing the cost of using incremental keys. There has been a Bloom filter bundle available for ECL for many years, but it’s not easy to use in conjunction with an index lookup. But in HPCC Systems 7.0.0, Bloom filter lookup technology has been built into the index lookup code so that it will be applied automatically. The BLOOM keyword can be used when building an index to specify that a Bloom filter (or filters) should be constructed while building the index. No special syntax is required when using an index. If the appropriate Bloom filter information is present in the index, it will be used automatically. Note that I said: 'The BLOOM keyword can be used when building an index to specify that a Bloom filter (or filters) should be constructed while building the index.' A single index can have multiple associated Bloom filters used for different fields (or combinations of fields) in the index. An index search will be checked against any applicable bloom filters before looking in the full index. Which Bloom filters are applicable will depend on the filter conditions used for the index search. If an exact match condition has been specified for a field and a Bloom filter for that field was constructed when the index was built, then that Bloom filter will be checked. Specifying multiple fields when adding a Bloom filter to an index allows more specific combinations to be checked. For example, if you had a bloom filter on Firstname and another on Lastname, and you were searching an index of Premiership football players for “Richard Chapman”, then using separate Bloom filters would say “Yes, there is a match for Richard” and “Yes, there is a match for Chapman”, and so would not save any lookup in the index. But a Bloom filter constructed on the combined Firstname, Lastname pair would most likely return “No match”. However, the Bloom filter used in the latter lookup would be significantly larger. Of course, nothing comes for free in computer science and with a Bloom filter there is a tradeoff to be made between the size of the table required to store the bits, the number of different hashes to compute for each value and the probability of giving a false positive. Fortunately, there is a simple formula that can be used to compute the required table size and number of hashes, given the number of distinct values to store and the desired probability of a positive answer being incorrect. Even more fortunately, the ECL index build activity will apply this formula for you automatically. You just supply the probability value and the build process determines the rest (it can determine the number of distinct values as it is building the index). A larger value for the probability will give a smaller table and faster checks, but may mean that more full index lookups are performed unnecessarily. A smaller value for the probability will conversely mean that the Bloom lookup is more expensive (in both space and time) but that fewer unnecessary index checks are done. At present, in the HPCC Systems 7.0.0 beta release, we default to adding a Bloom filter for the first field in every index. Whether this is a sensible default remains to be seen (but it does ensure that the code gets a good workout!). To limit the storage usage from high cardinality fields, we will not create a bloom filter if the cardinality of the field (or field combination) for a Bloom filter exceeds 100000 per index part. This limit can be overridden by specifying LIMIT(n) on the Bloom attribute of the index build. Suppose you have an index used to lookup from a customerID to retrieve information about recent orders: There are typically two options in ECL for updating these indexes. However by using a BLOOM attribute when building the partial indexes: The lookups in the partial keys (where a match will be unlikely) will be largely avoided (and so will the associated cache churn). It may not be worth having a BLOOM filter specified on the main rolled-up index, since in this application you would expect most lookups to find a match there. If you were looking up by customerId,date rather than just customerId, you can specify a bloom filter on both fields: Open Source HPCC Systems  Platform Contact Us Stay Connected Subscribe to Developer Communications Follow us on Pinterest Follow us on Twitter Join our LinkedIn Group Join our Meetup Group Like us on Facebook Register on our site Subscribe to our YouTube Channel  Copyright © 2019 LexisNexis. All rights reserved.  