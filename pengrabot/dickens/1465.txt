Get the latest tutorials on SysAdmin and open source topics. Droplets Scalable compute services. Managed Databases Worry-free setup & maintenance. Spaces Simple object storage. Kubernetes Run managed Kubernetes clusters. Load Balancers Easily distribute traffic. Block Storage Attach scalable volumes. Marketplace Deploy pre-built applications. Community Overview Connect, share and learn Tutorials DevOps and development guides Questions & Answers Development and systems Q&A Projects Community-built integrations by Justin Ellingwood Documentation Contact Support Network Status Emacs is one of the oldest and most versatile text editors available for Linux and UNIX-based systems. It's been around for a long time (more than twenty years for GNU emacs) and is well known for its powerful and rich editing features. Emacs is also more than just a text editor; it can be customized and extended with different "modes", enabling it to be used like an Integrated Development Environment (IDE) for  programming languages like Java, C or Python. For those who have used both the ubiquitous vi and the user-friendly nano, emacs would come as an interesting cross-between. Its strengths and features would resemble those of vi while its menus, help files and easy-to-remember command-keys would compare with nano. In this article, we will see how we can install emacs in a Linux system and use it for basic text editing. Emacs is also available for graphical window managers for Linux like GNOME; however we will only cover the "text based" version here. You can check if your Linux system has emacs installed by simply running the following command: If the program is installed, the editor will start with the default welcome message. This was not the case in my CentOS 6.5 system: So I ran the following command to install the emacs packages: In Ubuntu 12, I ran the following command to install emacs. In both cases, Linux will query the required package information from available mirrors or software libraries and ask whether you would like to go ahead and install it. It will also give you an estimate of disk space required. Once you say yes (with a single keystroke of "y"), all emacs packages and their dependencies will be downloaded and installed. The process is just like installing any other Linux package: a lot of text messages will scroll by and installation progress will be shown. At the end of it, emacs will be available for you to work with. In the screenshot below, I have started emacs by itself. The program displays a welcome message in the main window: I type a name for my new file (myfile.txt) and press Enter again. A clean window appears. This is the new file, ready for text entry: Let's pause for a minute and look at the different parts of the user interface. It's also time we familiarize ourselves with some basic concepts. At the very top of the screen there is a menu. This is a major difference with vi, where you are presented with an empty screen. This looks like any other application menu and indeed, a lot of emacs functionality is accessible from here. Later, we will see how we can access it. Let's talk a bit more about buffers. The main editing space in emacs is therefore your view to the buffer. Name of the current file Current cursor location Current  editing mode (in our case it's text mode) The status of the file (-- for an unmodified file, ** for a file with un-saved changes and %% for read-only files) The text-based version of emacs treats "windows" quite differently from its GUI-based version. Unlike GUI-based applications, text-based emacs windows don't just pop out, they can't physically do so in a terminal or console session. Instead, when emacs needs to start a new window, its main buffer is split into two parts, like having two frames in a browser. The top half shows the main buffer and the bottom half displays the new content. An example of emacs spawning a new window is when you are accessing its help files or tutorials. We will talk more about windows later. Now that we are familiar with the user interface, it may be tempting to start typing and messing around. Just before we do so, let's spend a few more minutes on emacs' command keys.   Like most things in Linux, emacs relies heavily on keyboard commands. Fortunately, most of these keystrokes are fairly standard and easy to remember. Also, unlike vi, emacs doesn't have to switch between editing and command modes. When you open a file with emacs, you can just start typing and issue commands at the same time. Once you have made some changes to your document or written some text, you would want to save it. When you press  "n" (for no), emacs gives you a second chance to change your mind: If you are really sure you don't want to save, type yes (the whole word) and press Enter. This would take you back to command prompt. Navigating through a long document or help topic can be a tedious task if you don't know the right keys. Fortunately, in emacs there are not too many of these to remember and they are quite intuitive. Here is a list: As mentioned before, C stands for Ctrl key and M stands for meta (Alt / Option / Esc / Edit). We will now learn about some basic editing functions in emacs. Let's start with the simple task of selecting text. To mark a text region (similar to selecting text in popular word processors), follow these steps: Move the cursor to the position where you would like the selection to start. You can use any of the methods described before to move the cursor. Move the cursor to the position where you want the region to end. Again, use any of the key combinations described before. The text will be highlighted up to the point where your cursor is now located. Here is an example of marked text: Once you have the text region marked, you can copy or cut the text and paste it elsewhere. Move your cursor to the position where the text needs to be pasted. For deleting, Backspace and Delete keys work just the way you would expect them to work. There are two search directions in emacs: forward and backward. In forward search, the word you specify will be searched forward from the current cursor position. For backward search, it's the other way round. The mini-buffer will display a prompt like or As soon as you start typing, emacs will try to search for the text being typed and highlight any matches it finds in the main buffer. Here is an example. The next screenshot shows we are trying to search for the word "cat". Note how every occurrence in the main buffer is highlighted. For replacing text, follow these steps: Type the text and press Enter Type the replacing text and press Enter. Press y to replace the current match found. Press n to skip to the next match. Press q to exit without any replacements (basically escaping). Just so that we know, ispell did not install by default in my test CentOS 6.5 and Ubuntu 12 systems when I installed emacs  (this was emacs 23.3.1). I had to install ispell separately using the following command for Ubuntu: And for CentOS, it was hunspell: A new window will open under the main buffer and display different options related to ispell: The following two screenshots were taken from an Ubuntu system. We have the popular nursery rhyme written in emacs with a few spelling mistakes here and there. Once ispell is invoked, note how emacs suggests the correct spelling and prompts you to choose the right word. When you type the number corresponding to a suggestion, that replacement will happen and ispell will move to the next misspelled word. Once the spell checking completes, the mini buffer will show a message like this: For justifying a selected text region, follow these steps: Create a text region to highlight the text you wish to justify Complete the justification command (for example set-justification-right) and press Enter. The selected text will be justified. Here are some command keys for converting cases. When emacs starts, it usually takes up the whole screen. Most of its functions are also accessible from a menu bar located at top of the screen. Unlike GUI-based programs, text-based emacs menus can't be pulled down by  mouse. In fact you can't even highlight and scroll through the menus with a shortcut key. In the following two screenshots, the main menu window has opened under the main buffer and the Edit menu options are displayed. Note the prompt in the mini-buffer. To give an idea of the power of emacs, here are some extras available from its Tools menu: Calendar Simple calculator Programmable calculator Searching a directory Encrypting and decrypting document Send and read e-mails Search files using grep Spell checking Running shell commands and compiling codes Version control Compare and merge files Emacs has an extensive help system and tutorial available. Accessing it is fairly simple: you can either use the menu or use a shortcut key. Here is how you can find help through the menu: From here, choose the appropriate option. Alternately, if you favor short-cut keys, here is a quick list: I type "my" at the prompt and press tab again and emacs completes the rest for me. Pressing Enter then takes me back to the document. Once I am back in the main buffer for the document, I can press C-x b again to switch to  the TUTORIAL buffer. I can start typing "TU" and press tab. Emacs will complete the rest and pressing Enter will take me to the tutorial page. Depending on the mode selected, emacs can be used as a simple word processor for writing text files, like we have been doing so far or it can be adapted for other advanced tasks, like writing Python, C or Java code. For example, you can change emacs' mode to make it work with version control systems, run shell commands or read man pages. To give an example, we will write a simple "Hello World" app in Python using emacs. At the shell prompt, emacs is invoked with the name of our Python file: Emacs is smart enough to know the file extension and will start in Python mode. As you can see in the screenshot, the status line shows the mode (Python) and the main menu also has a separate entry for Python. We then write the code for our hello world app. Note how the main buffer is now showing keywords and comments in different colors. We can now save the file, quit emacs, change the file's permission and run it from the command prompt. c-mode python-mode java-mode html-mode perl-mode shell-script-mode We have used two minor modes before: one was with the ispell-mode for spell checking, the other one was for setting justification. Here is another example of minor mode: This mode enables a line of text to break and wrap to the next line when its length becomes more than 70 characters. It's a toggle switch, which means invoking it again will disable the line wrap. Here are some examples of minor modes: It's been a very basic introduction to emacs. We have not touched on more advanced topics like editing an emacs configuration file or enhancing its functionality through scripts. The program was written in Lisp and C and its raw power comes from the ability to write code in Elisp (Emacs Lisp) for customizing its default behavior. With Elisp, programmers and power users can change or enhance emacs features, record macros, create new shortcut keys or build a new functionality. Like any advanced computer software, emacs has a large command set and mastering everything isn't easy. There's so much to it that there are entire developer communities and programming resources in the Internet that focus solely on emacs commands and how-tos. But what we have covered here today will help you get started with basic editing, and that's all you may need for the moment. Once you are familiar with the basic commands, you can move on to more advanced topics. Simple setup. Full root access. Straightforward pricing.