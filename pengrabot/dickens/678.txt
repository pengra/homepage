A finite-state machine (FSM) is a mechanism whose output is dependent not only on the current state of the input, but also on past input and output values. Whenever you need to create some sort of time-dependent algorithm in VHDL, or if you are faced with the problem of implementing a computer program in an FPGA, it can usually be solved by using an FSM. State-machines in VHDL are clocked processes whose outputs are controlled by the value of a state signal. The state signal serves as an internal memory of what happened in the previous iteration. The traffic lights have a finite number of states, which we have given identifiable names. Our example state machine has no controlling inputs, the output is the state of the lights in north/south and west/east directions. It is elapsed time and the previous state of outputs which advances this state machine. Once we have our enumerated type, we can declare a signal of the new type which can be used for keeping track of the FSM’s current state. Using the state signal, the finite-state machine can then be implemented in a process with a Case statement. The Case statement contains a When statement for each of the possible states, causing the program to take different paths for every state. The When statement can also contain code which should be executed while in that particular state. The state will then typically change when a predefined condition is met. In this video tutorial we will learn how to create a finite-state machine in VHDL: Go to the next tutorial » Do you want to become a top-tier digital designer? Would you like to be sought after in the industry for your VHDL skills? Then you have come to the right place! VHDLwhiz helps you understand advanced concepts within digital logic design, without being overly technical. Learn the best tricks of the trade. Don't work harder than you have to!