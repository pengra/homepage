This site is my tutorials, rantings and musings on software development, with a focus on JavaScript, Ember.js, Vue.js and Node.js. The reduce() method applies a function against an accumulator and each value of the array (from left-to-right) has to reduce it to a single value. That sounds interesting. Let's say you had an array and wanted to sum all the values in the array. The simple solution would be to simply create a for loop and iterate over every value summing them together. A better way is to use reduce like so. The function callback would be invoked four times. Each time adding the previousValue to the currentValue. The last callback invocation would return 10. Keep in mind that the reduce syntax is as follows. The initial value is an optional parameter. If added this initial value will equal the previous value during the first invocation. So in the example above if the initial value was 10, for example, the final output would be 20. Let's say you have a list of words in an array. And you wanted to count how many times each word appears in the array. With only using reduce you can create an object like this. First let's take a look at countWords. This function is going to simply take an array and return an object with the counts for each word. We know from our last example that reduce uses a callback that contains four parameters. Previous, current, index and the original array. We can use this to our advantage. One technique in solving this problem is to use an associative array. That way we can store each name in the array as a key. We then simply increment each iteration if that key appears again. The first two parameters to the callback is the previous and next items in the array. In the example below we are calling them countMap and word. In the above example we use the reduce function to start counting each word using the associative array. Every invocation the countMap[word] is initialized to one or incremented. One issue with the above examples is that we left the initialization blank. To make the function work correctly we need to make sure we initialize countMap with a {}. Join me and receive a FREE Vue.js testing cheat sheet as well as the first chapter of my book Vue.js in Action! You'll also receive information on the latest in Node.js, Vue.js and JavaScript We won't send you spam. Unsubscribe at any time. Share on Twitter