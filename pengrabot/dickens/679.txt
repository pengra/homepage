23,796 16 15 What you will need: The filled black circle marks the entry point of the state machine (everything has to start somewhere). So, if our machine starts running, the light is off. It stays like that, until we use a light switch – the light goes on then, and goes off after 30 seconds. Pushing the button when the light is already on does nothing, and after 30 seconds, the light goes off. This FSM does not have any outputs. From a traditional mathematical perspective, the state Light On is equivalent with the light being switched on, but when we really start to program our system, of course we'll need to add some kind of output that actually does something – like switching on the light. This state machine works, but is it a good system? Is 30 seconds long enough? For most people, probably yeah, but the people on the 10th floor might not like our system. They might need longer than 30 seconds, let's say they need 40 seconds. But they need to wait for the 30 seconds to pass and the light to switch off to activate the light again, and they could be in the middle of a stair then. So, what we need to do is to allow the timer to be reset when the light is on and the button is pressed again. For that, we will need to re-model our system, modeling the start of the timer as an output of our transitions and adding another transition, as can be seen in Picture 2. Here, you can see two things: Note: If you are on Windows and haven’t already, install the official Arduino IDE as well. It comes with the required drivers. I’m not sure about the situation on Mac. Linux already contains the drivers, so an installation of the Arduino IDE is not neccessary. In case the welcome screen does not close after you created the project, just close it on your own, using the X in the tab. You should now have something similar to the first picture in the Project Explorer on the left. That's it for now. You have a working model of a staircase light! Another nice feature of Yakindu SCT is that you can simulate the statechart without writing any code beforehand. You can try if your state machine does exactly what you wanted it to do. Okay, we clicked around, used a graphical editor (normally associated with low-level-languages), let's get that thing to life. First, we need a code generator that transforms our statechart into C Code. That's surprisingly simple, though it might look like black magic at first. code from GitHub inside there: sc_timer_service.h sc_timer_service.c With YAKINDU SCT 2.7.0, there is a new option to obtain the project for this instructable: In SCT, go to File -> New -> Example..., select "YAKINDU Statechart Examples", and click next. In the new Example Wizard, click "Download" to obtain the newest set of examples as indicated. Select "Basic Finite State Machine For Arduino" from the arduino category, and click Finish. The project will be copied into your workspace. Right-click it and hit 'Refresh' - just to be sure. Now, we can start to work on the Arduino code in the *.ino-file the wizard generated. The first solution is really bad. We would have logic concerning the statechart outside of it. If we would rename our states, it would cease to work correctly; but those names are meant to be prosaic and not logic related. Using variables is okay, especially when working with desktop applications. We could sync with them every x milliseconds or so. Here, we want to use an operation. Add the following to the statechart’s interface declaration: The function declared here looks like this: The input parameter handle is of the type LightCtrl, it is the referrer to the statechart. If you are not that experienced in C: the star denotes a so-called pointer, so the variable contains the address of the statechart variable. This helps us because we can operate on the original object and don't have to create a copy of it. So, let's implement this function: As you can see, this function is bloody simple – we don't even use the handle to the statechart, we only write a HIGH on the LED pin if the operation's argument is true, and LOW otherwise. We change the statechart itself so that it looks like in the first picture. Remember step 1? Left to the slash is the needed input for the transition, right is the output of the state machine if this transition is taken. The output here is to call the specified operation with these arguments. Using the arduino plugin, you can now connect the arduino with the LED and the button attached to your computer, and use the button in the top toolbar to upload the program to your arduino. The circuit is shown in pictures two and three. The LED is connected to a digital pin (6) with a resistor of roundabout 200 Ohms. The cathode is attached to GND. Pushbuttons have four pins, please check which of these are always connected and which are connected when you push the button. Then, you attach the digital pin (3 is used here) to one side, and a pulldown resistor to GND. This stops the pin from „floating“, an undefined state, and keeps it on 0 Volts. When the button is pressed and the other side is attached to VCC, that side is „stronger“ because it has no resistor and the voltage goes up to 5 Volts – basically a voltage divider where one resistor is 0 Ohms. Please use a fairly high resistor here, because it limits the current going through the button. 1 kR is the minimum. As you can see, this program’s logic is completely independent from the actual size of our statechart. It does not matter if our statechart has 2 or 20 states – of course, if we want to do something, we need to implement a function here and there. But the main code inside of void loop() always stays pretty small and allows for a modular program architecture. We only have to take care of the interfaces from the statechart to our Arduino's hardware inside of our code, the auto-generated statechart handles its internal logic. Remember how we discussed to reset the timer when the button is pressed again? You could now add a transition from the Light On state to itself with „button“ as guard event, and you would not need to change or add a single line in your code. Try it out! So, you got stuck because you can't figure out which serial / USB-port your Arduino is connected to. Alright, you'll find instructions below for Windows and Linux. Plug the arduino in your computer, go to "Devices and Printers" (from the start menu or the system control panel). Your arduino should show up there, as you can see in the image - for me, the port would be COM12. This can change, for example when you use another USB port, reboot your system... If something does not work, check if this is still correct. Did you make this project? Share it with us! 28,130 Enrolled Answer                                          2 months ago 1 year ago Hi RenéB2, Reply                                          1 year ago 1 year ago Reply                                          1 year ago Hey SweidánO! Cool to see you are interested in the tool. Arrays are not available in the Open Source Edition of Yakindu Statechart Tools. A Professional Edition is available which offers Deep C Integration with which you can use pre-defined types, variables and methods from C-Code, including Arrays. If you are a student or professor, you can get the Professional Edition with an Academic License for free! Reply                                          1 year ago Thanks! 1 year ago Hi RebéB2, here on my Gentoo Linux system the folrders src and src-gen are not created however I follow your steps exactly as you advices. Reply                                          1 year ago Hey paul, I answered in the Yakindu User Group. Short version: When src and src-gen are not created, check the Console for output, probably your statechart has an error. 2 years ago Hi RenéB2 Best Regards. I'm manu 4371 Reply                                          2 years ago Hey manu, I am pleased you are using YAKINDU SCT for your project. I am somewhat confused by your problem, it doesn't sound complicated at all. The working simulation implies you have a problem with the code on the arduino. I'm assuming you have something like interface: in event button and two states named "On" and "Off", with transitions in both direction labeled "button". That would be the minimum working example. From your Arduino code, you'd need to detect the button rising edge (something like (prevState == LOW && nowState == HIGH) and then call the function raiseButton(&handle). That'd be the input side. On the output, you would need to somehow interpret the current state of the statemachine. There are multiple possibilities: you can define and call an operation setLight(state: bool), which you would then implement to set the LED depending on the parameter state. You could just poll the state from your code (isActive(main_region.ON)), or you could use out events and poll these. Have fun statecharting, Rene 2 years ago It looks like the Github links have changed. The Utils are now in: https://github.com/Yakindu/examples/tree/master/ba... Also, to run Yakindu one needs to install the Java SDK, which presents other issues. Reply                                          2 years ago Oh, and which issues did you have installing the SDK / JDK? Reply                                          2 years ago I didn't have issues installing Java because I am not installing it. So I therefore can't install Yakindu.From past experience, I have found Java to be bloated and the constant security updates unnerving. If I used it actively already, that would be one thing, but this would be my only reason to install it. Reply                                          2 years ago Thank you! The links are corrected now. Anyways, it's easier to use the new Example wizard to check out the whole project from github. © 2018 Autodesk, Inc.