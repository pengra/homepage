Hi, i'm a new bug hunter (beginner) and i encountered some problem during an XSS exploitation. In a bug bounty program i found an URL that is vulnerable to XSS (reflected). If i play this request with burp and then show the result by clicking "Show response in browser" it works. But if i directly put this URL in a web browser it doesn't works because my quote is encoded by the web browser (" is automatically transformed in %22). I dont want to submit my XSS because it only works when i use burp as proxy to prevent URL encoding. So my question is, is there a possibility to prevent my web browser to encode my quote in the URL ? I want to make a clear POC (easy to repeat) before submit this vuln. No login required, let's play for fun and knowledge. It has 10 levels, from easy to hardcore filter. Hello, I analyzed this code: (this code is example DOM XSS)  I'm doing it for the first time :-) Say a website has the following form on their sign-up page: Can the XSS on this website be used to steal the x-csrf-token and submit the form, even if the token is only generated on the first page? The end goal would be to have the attacker host a website with a maliciously crafted form, which would force the victim to make a POST request with the XSS in firstName being used to steal their CSRF token. Now let's say the first page can only be accessed after logging in from a different page, /login/sign-up. Once you login with a valid social media account, you are redirected to /login/. Then, once your first name or the payload into the firstName variable, you are redirected to /login/2, which is the page that is vulnerable to XSS. So if you have a valid login page with no XSS, and then you are directed to the sign up page, which will show you results on the next page (e.g. "Welcome, <script>alert(1)</script>", please check your email!), is that just self-XSS? 8.5k Subscribers 2 Online