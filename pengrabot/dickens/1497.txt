Rise of the Machines: AI and Security – Free Webinar with Checkmarx’ CTO Software Exposure is the new unknown. But not for long. Manage Software Exposure at the Speed of DevOps Gartner Magic Quadrant for Application Security Testing, 2018 The Complete Guide to Developer Secure Coding Education CISO of Brussels Airlines answers "Why Checkmarx?" Gartner Magic Quadrant for Application Security Testing, 2018 Checkmarx is pioneering Software Exposure Software Exposure is the new unknown. But not for long. Manage Software Exposure at the Speed of DevOps Gartner Magic Quadrant for Application Security Testing, 2018 The Complete Guide to Developer Secure Coding Education CISO of Brussels Airlines answers "Why Checkmarx?" Gartner Magic Quadrant for Application Security Testing, 2018 Checkmarx is pioneering Software Exposure  XSS attacks are typically planned and executed following way:   For example, let’s take a look at a trusted interactive website like Amazon. It’s very easy for the attacker to plant malicious code in the product feedback section of the web application. Once the unsuspecting user clicks on the malicious element, his browser executes the URL and causes extensive damage to the compromised computer.  There are four main XSS methodologies in use today:  Also referred to as Type-I XSS, Stored XSS involves the planting of the attack payloads into vulnerable servers. Clicking on a malicious link (URL) planted in a trusted web application initiates the hacking. These URLs are commonly found in various well-known and trusted websites that feature newsgroups, forums, talkback boards and discussion threads.  Web applications that don’t sanitize user input (i.e – URLs) are easy targets for the attackers. The victim’s browser executes the malicious URL as it assumes that it’s coming from a “trusted website”, which in fact is vulnerable to Cross-Site Scripting.  Example 1 Now the attacker can craft a URL in the following format and send it to the victim:  Example 2 Consider a website that has URLs of the following type: Let us say the parameter “name” is used to define name values for the user. The website uses this value to say “Hello Alex” on the webpage. In this example, a malicious hacker can exploit the parameter “name” by attaching malicious code to the parameter “name”: This specific shows a message box to the user displaying the words ‘XSS vulnerability’, but in reality, actual malware code could have been loaded via this exploit on a website. This attack succeeds because the web application that analyzes this URL and the website incorrectly trusts the user to always input safe data. It is not prepared for these threats. In this case, the attacker has used a benign website to launch a malware attack on an unsuspecting user, and the website owner usually has no idea that his or her website was exploited.  For example, the following code has been written to create a form that enables the user to pick his preferred language. There is also a provision for a default language in the query string, appearing as the parameter “default”.  Select your language: Assuming a web page is invoked with a URL such as:  A DOM Based XSS attack against this page can be launched by sending this URL to a victim:  When the URL is clicked, the browser sends a request for:  The server responds with the page containing the JavaScript code. The browser creates a DOM object for the page, in which the “document.location” object contains the string:  The original JavaScript code in the page does not expect the default parameter to contain HTML markup and it is echoed into the page DOM at runtime. The browser then executes the malicious script after rendering the resulting page. The attack manifests itself at the client-side script at runtime after the flawed script accesses the DOM variable document.location and assumes it’s not malicious.   XSS attacks can cause various levels of damage to web applications. This depends on the type of script delivered by the hackers. The most commonly found after-effects of XSS involve:   The following steps can be taken to steer clear of XSS threats:    Back to Vulnerability Knowledge Base